438. Find All Anagrams in a String   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 12119
Total Submissions: 36129
Difficulty: Easy
Contributors: Stomach_ache
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

//Runtime:O(n)


class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        if(s.empty() || p.empty()) return vector<int>();
        
        int n = s.length();
        int m = p.length();
        
        vector<int> dict(256, 0);
        for(int i = 0; i < m; i++)
        {
            dict[p[i]]++;
        }
        
        int j = 0;
        int cnt = m;

        //sliding window
        vector<int> res;
        for(int i = 0; i < n; i++)
        {
            while(j < n && j-i < m)
            {
                if(dict[s[j]] > 0)
                {
                    cnt--;
                }
                dict[s[j]]--;
                j++;
            }
            
            if(cnt == 0)
            {
                res.push_back(i);
            }
            
            
            //move left 
            dict[s[i]]++;
            if(dict[s[i]] > 0)
            {
                cnt++;
            }
            
        }
        
        return res;
    }
};
