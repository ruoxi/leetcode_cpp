437. Path Sum III   QuestionEditorial Solution  My Submissions
Total Accepted: 6678
Total Submissions: 17449
Difficulty: Easy
Contributors: Stomach_ache
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //Runtime: O(n)
 //Space: O(n)
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        int res = 0;
        
        //key is sum, value is # of ways to get this sum
        unordered_map<int, int> prefixsum;
        prefixsum[0] = 1;
        
        return helper(root, 0, sum,prefixsum);

        
    }
    
    int helper(TreeNode* root, int sum, int target, unordered_map<int, int>& prefixsum)
    {
        if(root == NULL) return 0;
        
        sum += root->val;
        
        int res = 0;
        if(prefixsum.find(sum - target) != prefixsum.end())
        {
            res += prefixsum[sum-target];
        }
        
        prefixsum[sum]++;
        
        res += helper(root->left, sum, target, prefixsum);
        res += helper(root->right, sum, target, prefixsum);
        
        prefixsum[sum]--;
        
        return res;
        
    }
};
