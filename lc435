435. Non-overlapping Intervals   QuestionEditorial Solution  My Submissions
Total Accepted: 1039
Total Submissions: 2863
Difficulty: Medium
Contributors: love_FDU_llp
Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:
Input: [ [1,2], [1,2], [1,2] ]

Output: 2

Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:
Input: [ [1,2], [2,3] ]

Output: 0

Explanation: You don't need to remove any of the intervals since they're already non-overlapping.


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
 //思路：sort intervals first
 //这里需要注意的是当prevEnd < next.start 的时候，留下min(prevEnd,next.end) 这样是为了留下更多区间给后面的interval
 //eg [1,4], [2,9], [4, 6] 这里留下[1,4] 保证后面[4...]都available
class Solution {
public:
    class Comparator
    {
    public:
        bool operator()(Interval& a, Interval& b)
        {
            if(a.start != b.start) return a.start < b.start;
            return a.end < b.end;
        }
    };
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        if(intervals.empty() || intervals.size() == 1) return 0;
        sort(intervals.begin(), intervals.end(), Comparator());
        int cnt = 0;
        int prevEnd = intervals[0].end;
        int n = intervals.size();
        for(int i = 1; i < n; i++)
        {
            //cout << "prevEnd=" << prevEnd << " start=" << intervals[i].start << endl;
            if(prevEnd> intervals[i].start)
            {
                cnt++;
                //remove the min end
                prevEnd = min(prevEnd, intervals[i].end);
            }
            else
            {
                prevEnd = intervals[i].end;
            }
        }
        
        return cnt;
    }
};
