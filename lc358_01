358. Rearrange String k Distance Apart   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 6301
Total Submissions: 19856
Difficulty: Hard
Contributors: Admin
Given a non-empty string str and an integer k, rearrange the string such that the same characters are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:
str = "aabbcc", k = 3

Result: "abcabc"

The same letters are at least distance 3 from each other.
Example 2:
str = "aaabc", k = 3 

Answer: ""

It is not possible to rearrange the string.
Example 3:
str = "aaadbbcc", k = 2

Answer: "abacabcd"

Another possible answer is: "abcabcda"

The same letters are at least distance 2 from each other.
//greedy
//Runtime: O(n)
//space: O(1)


class Solution {
public:

    //greedy,
    //one array save available cnts
    //one array save the next possible position
    string rearrangeString(string str, int k) {
        if(str.empty() || k == 0) return str;
        
        int n =str.size();
        
        vector<int> cnt(26,0);
        vector<int> pos(26, 0);
        
        for(int i = 0; i < n; i++)
        {
            cnt[str[i]-'a']++;
        }
        
        string res = "";
        for(int i = 0; i < n; i++)
        {
            //get valid char
            int c = getvalid(cnt, pos, i);
            
            if(c == -1) return "";
            
            cnt[c]--;
            pos[c] = i+k;
            
            res += 'a'+c;
        }
        
        return res;
    }
    
    int getvalid(vector<int>& cnt, vector<int>& pos, int idx)
    {
        //get char with max cnt with pos >=i
        int res = -1;
        for(int i = 0; i <26; i++)
        {
            if(cnt[i] == 0) continue;
            
            if((res == -1 || cnt[res] < cnt[i]) && pos[i] <= idx)
            {
                res = i;
            }
        }
        
        return res;
    }
};
