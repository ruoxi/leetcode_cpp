31. Next Permutation
Description  Submission  Solutions  Add to List
Total Accepted: 96413
Total Submissions: 341595
Difficulty: Medium
Contributors: Admin
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


class Solution {
public:
    //思路：从后向前看找第一个a[i] < a[i+1]的idx,
    //然后再从后向前找第一个>a[i]的,say a[j], swap(a[i], a[j])然后再把a[i+1...n-1]按升序排序
    void nextPermutation(vector<int>& nums) {
        
        if(nums.size() < 2) return;
        
        int n = nums.size();
        
        int idx = n-2;
        
        for(; idx>=0; idx--)
        {
            if(nums[idx] < nums[idx+1])
            {
                break;
            }
        }
        
        if(idx == -1)
        {
            reverse(nums.begin(), nums.end());
            return;
        }
        
        //now find the first element > nums[idx]
        int next = n-1;
        for(; next >idx; next--)
        {
            if(nums[next] > nums[idx])
            {
                break;
            }
        }
        
        swap(nums[idx], nums[next]);
        
        sort(nums.begin()+idx+1, nums.end());
        
    }
};
