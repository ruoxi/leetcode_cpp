/*315. Count of Smaller Numbers After Self   QuestionEditorial Solution  My Submissions
Total Accepted: 20212
Total Submissions: 61684
Difficulty: Hard
Contributors: Admin
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].
*/

//思路：从后向前，找出第一个等于或大于当前数字的position, 那么在这个position之前的数就是当前数字的答案



class Solution {
public:
    int lower_bound(vector<int>& nums, int target)
    {
        if(nums.empty()) return -1;
        
        int start = 0 , end = nums.size()-1;
        
        while(start + 1 < end)
        {
            int mid = start + (end - start)/2;
            
            if(nums[mid] >= target)
            {
                end = mid;
            }
            else
            {
                start = mid;
            }
        }
        
        if(nums[start] >= target) return start;
        else if(nums[end] >= target) return end;
        return -1;
    }
    vector<int> countSmaller(vector<int>& nums) {
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        
        vector<int> increasing;
        vector<int> res(n, 0);
        
        for(int i = n-1; i >=0 ; i--)
        {
            int cur = nums[i];
            
            //cout << "cur = " <<cur <<" i=" <<i <<endl;
            //find lower bound
            int pos = lower_bound(increasing, cur);
            //cout << "pos=" << pos << endl;
            //means all num in increasing are smaller than cur
            if(pos == -1)
            {
                res[i] = increasing.size();
                increasing.push_back(cur);
            }
            else
            {
                res[i] = pos;

                increasing.insert(increasing.begin()+pos, cur);
            }
            
        }
        
        return res;
    }
};
