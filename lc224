/*
224. Basic Calculator   QuestionEditorial Solution  My Submissions
Total Accepted: 37531
Total Submissions: 152695
Difficulty: Hard
Contributors: Admin
Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23

*/

//思路：当碰到+,-时，把当前的数字*sign加入到res中
//当碰到(时，把之前的res和sign都放入stack中， 注意要reset sign和res
//当碰到)时，把之前的res 和sign pop出来，和括号中的res算结果

class Solution {
public:
    int calculate(string s) {
        
        if(s.empty()) return 0;
        
        int n = s.length();
        
        int res = 0;
        int sign = 1;
        
        stack<int> nums;
        stack<int> signs;
        int cur = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '+' || s[i] == '-')
            {
                res += cur*sign;
                
                if(s[i] == '+')
                {
                    sign = 1;
                }
                else
                {
                    sign = -1;
                }
                cur = 0;
            }
            else if(s[i] == '(')
            {
                //put cur and sign to stacks
                nums.push(res);
                signs.push(sign);
                //remember to reset res and sign here.
                res=0;
                sign = 1;
            }
            else if(s[i] == ')')
            {
                //add cur to res inside bracket
                //then pop previous num and signs from stack
                res += cur*sign;
    
                int prev = nums.top();
                nums.pop();
                int lastsign = signs.top();
                signs.pop();

                res = prev + lastsign*res;

                cur = 0;
                
            }
            else if(isdigit(s[i]))
            {
                cur = cur*10 + s[i]-'0';
            }
        }
        
        //add last one
        //cout <<" res=" << res << " cur=" << cur << endl;
        res += cur*sign;
        
        return res;
    }
};
