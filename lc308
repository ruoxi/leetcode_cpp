308. Range Sum Query 2D - Mutable   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 10312
Total Submissions: 51911
Difficulty: Hard
Contributors: Admin
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -> 10
Note:
The matrix is only modifiable by the update function.
You may assume the number of calls to update and sumRegion function is distributed evenly.
You may assume that row1 ≤ row2 and col1 ≤ col2.

//Runtime: Build binary indexed tree O(mn*logmn)
//         update/sum O(logn)
//Space: O(nm)
//这里注意不能把2D binary indexed tree转化为1D binary indexed tree
//因为bitree[0][1]点表示从[0][0]加到[0,1]的和，其实是一列的和，与[0,2], [0,3]均无关系

class NumMatrix {
public:
    NumMatrix(vector<vector<int>> &matrix) {
        
        if(matrix.empty() || matrix.at(0).empty()) return;
        
        int n = matrix.size();
        int m = matrix.at(0).size();
        this->matrix.assign(n, vector<int>(m, 0));
        bitree.assign(n+1, vector<int>(m+1, 0));
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                update(i, j, matrix[i][j]);
            }
        }
        
    }

    void update(int row, int col, int val) {
        
        int diff = val - matrix[row][col];
        for(int i = row+1; i < bitree.size(); i += i&(-i))
        {
            for(int j = col+1; j < bitree.at(0).size(); j+= j&(-j))
            {
                bitree[i][j] += diff;
            }
        }
        matrix[row][col] = val;
    }

    //bitree[i][j] + its parent gives sum from (0,0 to i, j)
    int sumRegion(int row1, int col1, int row2, int col2) {
        
        return sum(row2, col2) - sum(row1-1, col2) - sum(row2, col1-1) + sum(row1-1, col1-1);
        
    }
    
    
    int sum(int row, int col)
    {
        int sum = 0;
        for(int i = row+1; i >0; i -= i&(-i))
        {
            for(int j = col+1; j>0; j -= j&(-j))
            {
                sum += bitree[i][j];
            }
        }
        
        return sum;
    };
    vector<vector<int>> bitree;
    vector<vector<int>> matrix;
};


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.update(1, 1, 10);
// numMatrix.sumRegion(1, 2, 3, 4);
