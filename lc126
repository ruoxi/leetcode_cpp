126. Word Ladder II   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 59501
Total Submissions: 436938
Difficulty: Hard
Contributors: Admin
Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:
All words have the same length.
All words contain only lowercase alphabetic characters.


class Solution {
public:

    //first BFS  build up a undirected map, mark the distance for each node
    //then dfs from the end word, use distance map to make sure traverse to the shortest path
    vector<vector<string>> findLadders(string beginWord, string endWord, unordered_set<string> &wordList) {
        
        if(wordList.empty()) return vector<vector<string>>();
        
        wordList.insert(endWord);
        
        
        unordered_map<string, int> dist;
        unordered_map<string, set<string>> graph;
        
        bfs(beginWord, endWord, wordList, graph, dist);
        
        vector<vector<string>> res;
        vector<string> sol;
        //now dfs search from the endWord
        dfs(endWord, beginWord, graph, dist, sol, res);
        
        return res;
        
    }
    
    void dfs(string cur, string beginWord, unordered_map<string, set<string>>& graph, unordered_map<string, int>& dist, vector<string> sol, vector<vector<string>>& res)
    {
        sol.push_back(cur);
        if(cur == beginWord)
        {
            reverse(sol.begin(), sol.end());
            res.push_back(sol);
            return;
        }
        
        
        for(auto next : graph[cur])
        {
            
            if(dist[cur] == dist[next]+1)
            {
                dfs(next, beginWord, graph, dist, sol, res);

            }
        }
    }
    
    void bfs(string beginWord, string endWord, unordered_set<string>& wordList, unordered_map<string, set<string>>& graph, unordered_map<string, int>& dist)
    {
        queue<string> q;
        q.push(beginWord);
        dist[beginWord] = 0;
        
        int wordLen = beginWord.length();
        int level = 0;
        while(!q.empty())
        {
            int size = q.size();
            level++;
            for(int i = 0; i < size; i++)
            {
                string cur = q.front();
                q.pop();
                
                if(cur == endWord)
                {
                    break;
                }
                string next = cur;
                //try to get next legal word
                for(int j = 0; j < wordLen; j++)
                {
                    char c = next[j];
                    for(int k = 0; k < 26; k++)
                    {
                        if(c == 'a'+k) continue;
                        
                        next[j] = 'a'+k;
                        
                        if(wordList.find(next) == wordList.end()) continue;
                        //注意这里一定要在check distance之前加入
                        //eg. 如果一个词可以由两个词推导出，并且他们都在同一个level,
                        //虽然不需要再update distance，但是graph需要update
                        graph[next].insert(cur);
                        
                        if(dist.find(next) != dist.end()) continue;
                        
                        dist[next] = dist[cur]+1;
                        //cout << "dist[" << next << "]=" << dist[next] << endl;
                        q.push(next);
                    }
                    
                    next[j] = c;
                }
            }
        }
    }
};
