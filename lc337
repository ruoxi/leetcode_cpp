337. House Robber III   QuestionEditorial Solution  My Submissions
Total Accepted: 29892
Total Submissions: 73066
Difficulty: Medium
Contributors: Admin
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //Runtime: O(n)
 //Space: O(logn)
class Solution {
public:
    class Result
    {
    public:
        int rob;
        int notrob;
        Result(int xx, int yy ) : rob(xx), notrob(yy) {}
    };
    
    int rob(TreeNode* root) {
        if(root == NULL) return 0;
        
        if(root->left == NULL && root->right == NULL) return root->val;
        
        Result res = helper(root);
        return max(res.rob, res.notrob);
    }
    
    Result helper(TreeNode* root)
    {
        if(root == NULL) return Result(0, 0);
        
        if(root->left == NULL && root->right == NULL) return Result(root->val, 0);
        
        Result left = helper(root->left);
        Result right = helper(root->right);
        
        int rob = left.notrob + right.notrob + root->val;
        
        int notrob = max(left.notrob, left.rob) + max(right.notrob, right.rob);
        
        return Result(rob, notrob);
    }
};
