417. Pacific Atlantic Water Flow   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 7857
Total Submissions: 23988
Difficulty: Medium
Contributors: Admin
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
The order of returned grid coordinates does not matter.
Both m and n are less than 150.
Example:

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).
Show Company Tags
Show Tags



class Solution {
public:
    //from pacific border, mark all the cell that can flow water to pacific as visited
    //and do same thing for atlantic, 
    //the one marked in both visited arraies are the point that can flow water to both pacific and atlantic
    //BFS
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
        if(matrix.empty() || matrix.at(0).empty()) return vector<pair<int, int>>();
        
        int n = matrix.size();
        int m = matrix.at(0).size();
        
        vector<vector<bool>> pvisited(n, vector<bool>(m, false));
        
        vector<vector<bool>> avisited(n, vector<bool>(m, false));
        
        queue<pair<int, int>> pacific;
        queue<pair<int, int>> atlantic;
        
        for(int i = 0; i < n; i++)
        {
            
            pvisited[i][0] = true;
            dfs(matrix, pvisited, i, 0);
            
            avisited[i][m-1] = true;
            dfs(matrix, avisited, i, m-1);

        }
        
        for(int j = 0; j < m; j++)
        {
            
            pvisited[0][j] = true;
            dfs(matrix, pvisited, 0, j);

            avisited[n-1][j] = true;
            dfs(matrix, avisited, n-1, j);
        }
        
        
        vector<pair<int, int>> res;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(pvisited[i][j] && avisited[i][j])
                {
                    res.push_back(make_pair(i, j));
                }
            }
        }
        
        return res;
    }
    
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    void dfs(vector<vector<int>>& matrix, vector<vector<bool>>& visited, int cx, int cy)
    {
        int n = matrix.size();
        int m = matrix.at(0).size();
        
        
        visited[cx][cy] = true;
        for(int i = 0; i < 4; i++)
        {
            int nx = cx + dx[i];
            int ny = cy + dy[i];
            if(nx < 0 || nx >=n || ny <0 || ny >=m || visited[nx][ny]) continue;
            
            if(matrix[cx][cy] > matrix[nx][ny]) continue;
            
            dfs(matrix, visited, nx, ny);
            
        }
    }
};
