133. Clone Graph   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 93169
Total Submissions: 372170
Difficulty: Medium
Contributors: Admin
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
Show Company Tags
Show Tags
Show Similar Problems

//Runtime: O(V+E)
//Space:O(V)


/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    //first clone all the nodes using bfs
    //second clone edge
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(node == NULL) return NULL;
        
        //key is orginal node and value is the cloned node
        unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> graph;
        
        queue<UndirectedGraphNode*> q;
        q.push(node);
        graph[node] = new UndirectedGraphNode(node->label);
        
        while(!q.empty())
        {
            UndirectedGraphNode* cur = q.front();
            q.pop();
            
            for(auto next : cur->neighbors)
            {
                if(graph.find(next) != graph.end()) continue;
                
                graph[next] = new UndirectedGraphNode(next->label);
                q.push(next);
            }
        }
        
        //now clone edge
        for(auto nodePair : graph)
        {
            for(auto next : nodePair.first->neighbors)
            {
                nodePair.second->neighbors.push_back(graph[next]);
            }
        }
        
        return graph[node];
        
    }
};
