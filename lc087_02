87. Scramble String   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 56340
Total Submissions: 200512
Difficulty: Hard
Contributors: Admin
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

class Solution {
public:
    //记忆化搜索
    //state: dp[s1+s2] 表示s1[start1...end1]和s2[start2...end2]是否是scramble
    //function: dp[s1+s2] = dp[s1[start1, start1+len-1] + s2[start2, start2+len-1]] && dp[s1[start1+len, end1]+s2[start2+len, end2]] || dp[s1[start1, start1+len-1] + s2[end2-len+1, end2]] && dp[s1[start1+len, end1] + s2[start2, end2-len]]
    //initialization: 
    bool isScramble(string s1, string s2) {
        if(s1.empty() && s2.empty()) return true;
        if(s1.empty() || s2.empty()) return false;
        
        int n = s1.length(), m = s2.length();
        if(n != m) return false;
        
        if(s1 == s2) return true;
        
        //unordered_map<string, bool> dp;

        vector<vector<vector<bool>>> dp(n+1, vector<vector<bool>>(n, vector<bool>(n, false)));
        vector<vector<vector<bool>>> visited(n+1, vector<vector<bool>>(n, vector<bool>(n, false)));
        return helper(s1, 0, s2, 0, n, dp, visited);
    }
    
    
    bool helper(string s1, int start1, string s2, int start2, int len, vector<vector<vector<bool>>>& dp, vector<vector<vector<bool>>>& visited)
    {
        //cout << "start1=" << start1  << " start2=" << start2 << " len=" << len << endl;

        
        if(visited[len][start1][start2]) return dp[len][start1][start2];
        
        if(len==1)
        {
            
            dp[len][start1][start2] = s1[start1] == s2[start2];
            visited[len][start1][start2] = true;
            return dp[len][start1][start2];
        }
        
        if(s1 == s2) 
        {
            dp[len][start1][start2] = true;
            visited[len][start1][start2] = true;
            return true;
        }
        
        if(!isvalid(s1, start1, s2, start2, len)) 
        {
            dp[len][start1][start2] = false;
            visited[len][start1][start2] = true;
            return false;
        }
        
        for(int i = 1;i < len; i++)
        {
            //cout << "len=" << len << endl;
            if(helper(s1, start1, s2, start2, i, dp, visited) && helper(s1, start1+i, s2, start2+i, len-i, dp, visited)) 
            {
                dp[len][start1][start2] = true;
                visited[len][start1][start2] = true;
                return true;
            }
   
            if(helper(s1, start1, s2, start2+len-i, i, dp, visited) && helper(s1, start1+i, s2, start2, len-i, dp, visited))
            {
                dp[len][start1][start2] = true;
                visited[len][start1][start2] = true;
                return true;
            }

        }
        
        dp[len][start1][start2] = false;
        visited[len][start1][start2] = true;
        return false;
        
    }
    
    
    //if the count of each char in s1 is not the same as s2, then not valid
    bool isvalid(string s1, int start1, string s2, int start2, int len)
    {
        vector<int> cnt(256, 0);
        
        for(int i = 0; i < len; i++)
        {
            cnt[s1[start1+i]]++;
            cnt[s2[start2+i]]--;
        }
        
        for(int i = 0; i <256; i++)
        {
            if(cnt[i] != 0)
            {
                return false;
            }
        }
        
        return true;
    }
};
