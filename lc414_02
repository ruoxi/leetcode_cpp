414. Third Maximum Number   QuestionEditorial Solution  My Submissions
Total Accepted: 4157
Total Submissions: 15850
Difficulty: Easy
Contributors: ZengRed , 1337c0d3r
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.


class Solution {
public:
    int thirdMax(vector<int>& nums) {
       int small = INT_MIN;
       int mid = INT_MIN;
       int maxv = INT_MIN;
       int flag = false; //indicate a INT_MIN in nums
       for(auto num : nums)
       {
           if(num == INT_MIN)
           {
               flag = true;
           }
           if(num == mid || num == maxv || num == small)
           {
               continue;
           }
           cout << "num=" << num << endl;
           if(num > maxv)
           {
               small = mid;
               mid = maxv;
               maxv = num;

           }
           else if(num > mid)
           {
               small = mid;
               mid = num;
  
           }
           else if(num > small)
           {
               //cout << "num>=small " << num << endl;
               small = num;

           }
       }
       //cout << "small=" << small << " mid=" << mid << " maxv=" << maxv << " fendl;
       if(small == INT_MIN)
       {
           if(mid != INT_MIN)
           {
               if(flag)
               {
                   return small;
               }
               else
               {
                   return maxv;
               }
           }
           else
           {
               return maxv;
           }
       }
       else
       {
           return small;
       }
       
    }
};
