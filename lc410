/*410. Split Array Largest Sum   QuestionEditorial Solution  My Submissions
Total Accepted: 1726
Total Submissions: 6556
Difficulty: Hard
Contributors: Admin
Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
Given m satisfies the following constraint: 1 ≤ m ≤ length(nums) ≤ 14,000.

Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.*/

Runtime: O(nlogn)

class Solution {
public:
    //思路：极限状态，最大的sum是所有数之和，
    //      另一个极限是，每个num都分到各自的bucket中， 这时候的 max sum是num中最大的
    //符合题意的min largest sum是在这两个值之间的，用二分做
    int splitArray(vector<int>& nums, int m) {
        
        int sum = 0;
        int maxNum = 0;
        
        for(int i = 0; i < nums.size(); i++)
        {
            sum += nums[i];
            maxNum = max(maxNum, nums[i]);
        }
        
        return binarySearch(nums, m, maxNum, sum);
    }
    
    //这里二分是要找最小的valid的值
    int binarySearch(vector<int>& nums, int m, int low, int high)
    {
        
        while(low + 1 < high)
        {
            int mid = low + (high - low)/2;
            if(isvalid(nums, m , mid))
            {
                high = mid;
            }
            else
            {
                low = mid;
            }
        }
        //check if low works
        //cout << "low=" << low << " high = " << high << endl;
        if(isvalid(nums, m, low)) return low;
        if(isvalid(nums, m, high)) return high;
        return -1;
    }
    
    bool isvalid(vector<int>& nums, int m, int target)
    {
        //注意这里count=1表示当sum>target时，已经开始第二组
        int count  = 1;
        int sum = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            sum += nums[i];
            if(sum > target)
            {
                count++;
                sum = nums[i];
                if(count > m)
                {
                    return false;
                }
            }
        }
        
        return true;
    }
};
