338. Counting Bits   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 56403
Total Submissions: 95221
Difficulty: Medium
Contributors: Admin
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

class Solution {
public:
    vector<int> countBits(int num) {
        if(num == 0) return {0};
        if(num == 1) return {0, 1};
        
        int shift = 1;
        vector<int> dp(num+1, 0);
        dp[0] = 0; 
        dp[1] = 1;
        int base = 0;
        for(int i = 2; i<= num; i++)
        {
            if(i == (1 << shift))
            {
                dp[i] = 1;
                base = i;
                shift++;
                continue;
            }
            
            dp[i] = dp[i-base]+1;
        }
        
        
        return dp;
        
    }
};
