402. Remove K Digits   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 12553
Total Submissions: 47996
Difficulty: Medium
Contributors: Admin
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

//Runtime: O(n)
//Space:O(n)

class Solution {
public:
    //思路是要remove掉大的数字，但是在高位的有high priority
    //用一个stack来维护能放进result中的数字，当前的数字小于在stack中的top,那么说明我们可以用更小的数字替换掉stack中的top
    //同时要确定remove掉的数字<=k
    //所以如果大的数字都在最后的话stk中会包含所有的数字
    //算好最终的结果应该至少有n-k长度，把leading zero扣掉后就是最终的长度
    string removeKdigits(string num, int k) {
        if(num.empty() || k >= num.length()) return "0";
        
        int n = num.length();
        
        int m = n-k; //this is the final length after remove
        
        string stk = "";
        int removed = 0;
        
        for(int i = 0; i < n; i++)
        {
            char cur = num[i];
            
            while(!stk.empty() && stk.back() > cur && removed < k)
            {
                removed++;
                stk.pop_back();
            }
            
            stk.push_back(cur);
        }
        
        
        //remove leading zeros
        int i = 0;
        while(i < stk.length() && stk[i] == '0')
        {
            i++;
        }
        
        return i == stk.length() ? "0" : stk.substr(i, m-i);

    }
};
