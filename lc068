/*68. Text Justification   QuestionEditorial Solution  My Submissions
Total Accepted: 41470
Total Submissions: 239325
Difficulty: Hard
Contributors: Admin
Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

For example,
words: ["This", "is", "an", "example", "of", "text", "justification."]
L: 16.

Return the formatted lines as:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
Note: Each word is guaranteed not to exceed L in length.
*/
//let n be number of lines, L is maxWith per line
//Runtime: O(nL)
//Space:O(nL) 


class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        
        int n = words.size();
        vector<string> res;
        
        for(int i = 0; i < n;)
        {
            int len = 0;
            int k = 0;
            //Note: k is number of words can be inserted to current line
            while(i+k < n && len + words[i+k].length()<= maxWidth-k)
            {
                len += words[i+k].length() ;
                k++;
            }
    
            //when break while loop, k is the number of words in current line
            //calculate #of whitespace
            string line = words[i];
            for(int j = 0; j < k-1; j++)
            {
                //Note: this is to check if we are at last line
                //if last line, it should be left justified and no extra space is inserted between words
                if(i + k >= n) 
                {
                    line += " ";
                }
                else
                {
                    int space = (maxWidth-len)/(k-1);
                    if(j < (maxWidth-len)%(k-1))
                    {
                        space +=1;
                    }
                
                    line += string(space, ' ');
                }
                line += words[i+j+1];
            }
            line += string(maxWidth-line.length(), ' ');
            res.push_back(line);
            i = i+k;
            
        }
        
        return res;
    }
};
