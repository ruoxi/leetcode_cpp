/*392. Is Subsequence   QuestionEditorial Solution  My Submissions
Total Accepted: 12244
Total Submissions: 28031
Difficulty: Medium
Contributors: Admin
Given a string s and a string t, check if s is subsequence of t.

You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?
*/

//Runtime: O(n) + mO(logm)


class Solution {
public:
    //binary search solution:
    //preprocess t, mark the index of each chars in t
    //then iterate through s, for each char in s, if it is not in preprocessed table, return false
    //else use prev to note the lower bound of the position in t
    //check if the occurance of s[i] in t is lower than prev
    bool isSubsequence(string s, string t) {
        
        if(s.empty()) return true;
        if(t.empty()) return false;
        
        int n = t.length();
        //preprocess t
        vector<vector<int>> table(26, vector<int>());
        
        for(int i = 0; i < n; i++)
        {
            table[t[i] - 'a'].push_back(i);
        }
        
        int m = s.length();
        int prev = 0;
        for(int i = 0; i <m; i++)
        {
            if(table[s[i]-'a'].empty()) return false;
            
            int pos = lower_bound(table[s[i]-'a'], prev);
            
            if(pos == -1) return false;
            prev = table[s[i]-'a'][pos]+1;
        }
        
        return true;
        
        
        
    }
    
    int lower_bound(vector<int>& nums, int target)
    {
        if(nums.empty()) return -1;
        int start = 0, end = nums.size()-1;
        
        while(start + 1 < end)
        {
            int mid = start + (end-start)/2;
            
            if(nums[mid] >= target)
            {
                end = mid;
            }
            else
            {
                start = mid;
            }
        }
        
        if(nums[start] >= target) return start;
        if(nums[end] >=target) return end;
        return -1;
    }
};
