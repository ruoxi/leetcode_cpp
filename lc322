322. Coin Change   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 43515
Total Submissions: 168128
Difficulty: Medium
Contributors: Admin
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
coins = [1, 2, 5], amount = 11
return 3 (11 = 5 + 5 + 1)

Example 2:
coins = [2], amount = 3
return -1.

Note:
You may assume that you have an infinite number of each kind of coin.

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
//Runtime: O(n*amount)
//Space: O(amount)


class Solution {
public:
    //背包型dp
    //state: dp[i]表示组成和为i的最小coins数目
    //function: dp[i] = min{ dp[i-coins[j] +1} 
    //initialization: dp[0] = 0;
    int coinChange(vector<int>& coins, int amount) {
        if(coins.empty()) return -1;
        if(amount == 0) return 0;
        
        vector<int> dp(amount+1, amount+1);
        dp[0] = 0;
        int n = coins.size();
        
        for(int i = 1; i <= amount; i++)
        {
            for(int j = 0; j <n; j++)
            {
                if(coins[j] <= i)
                {
                    dp[i] = min(dp[i], dp[i-coins[j]]+1);
                }

            }
        }
        
        return dp[amount] > amount ? -1 : dp[amount];
    }
};
