//202. Happy Number  QuestionEditorial Solution  My Submissions
//Total Accepted: 93193
//Total Submissions: 242412
//Difficulty: Easy
//Write an algorithm to determine if a number is "happy".

//A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

//Example: 19 is a happy number

//12 + 92 = 82
//82 + 22 = 68
//62 + 82 = 100
//12 + 02 + 02 = 1



class Solution {
public:

    int getnext(int n)
    {
        int next = 0; 
        
        while(n > 0)
        {
            int tmp = n%10;
            next += tmp*tmp;
            n = n/10;
        }
        
        return next;
    }
    
    
    bool isHappy(int n) {
        //use slow and fast pointer, just like detect linked list cycle
        //idea is: if it is happy number, fast pointer will keeps pointing to 1 and slow pointer will finally catch up
        //if it is not, then fast and slow pointer will meet
        int slow = n, fast = n;
        
        do
        {
            slow = getnext(slow);
            fast = getnext(fast);
            fast = getnext(fast);
        }while(slow != fast);
        
        if(slow == 1) return true;
        return false;
        
    }
};
