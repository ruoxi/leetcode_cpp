261. Graph Valid Tree   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 26351
Total Submissions: 72450
Difficulty: Medium
Contributors: Admin
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Show Hint 
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


class Solution {
public:
    //判断是否是valid tree: n个node, n-1条边
    //不能有环： roota != rootb for a edge
    bool validTree(int n, vector<pair<int, int>>& edges) {
        int m = edges.size();
        if(n != m+1) return false;
        
        vector<int> father(n, 0);
        for(int i = 0; i < n; i++)
        {
            father[i] = i;
        }
        
        for(int i = 0; i < m; i++)
        {
            int roota = find(father, edges[i].first);
            int rootb = find(father, edges[i].second);
            
            if(roota == rootb) return false;
            
            father[rootb] = roota;
        }
        
        return true;
    }
    
    int find(vector<int>& father, int a)
    {
        int pa = father[a];
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        int roota = pa;
        pa = a;
        
        while(pa != father[pa])
        {
            int tmp = father[pa];
            father[pa] = roota;
            pa = tmp;
        }
        
        return roota;
    }
};
