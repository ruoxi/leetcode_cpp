360. Sort Transformed Array   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 7547
Total Submissions: 17491
Difficulty: Medium
Contributors: Admin
Given a sorted array of integers nums and integer values a, b and c. Apply a function of the form f(x) = ax2 + bx + c to each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example:
nums = [-4, -2, 2, 4], a = 1, b = 3, c = 5,

Result: [3, 9, 15, 33]

nums = [-4, -2, 2, 4], a = -1, b = 3, c = 5

Result: [-23, -5, 1, 7]
Credits:
Special thanks to @elmirap for adding this problem and creating all test cases.



//Runtime: O(n)
class Solution {
public:
    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {
        
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        vector<int> res(n, 0);
        
        //if a >0 -b/2a越远越大
        //if a <0, 离中轴线越近越大
        //if a==0, 那么函数是单调递增或递减的，
        int idx = 0;
        if(a >=0)
        {
            idx = n-1;
        }
        
        int left = 0; int right = n-1;
        
        while(left <= right)
        {
            if(a>=0)
            {
                if(f(nums[left], a, b, c) > f(nums[right], a, b, c))
                {
                    res[idx] = f(nums[left], a, b, c);
                    left++;
                }
                else
                {
                    res[idx] = f(nums[right], a, b, c);
                    right--;
                }
                idx--;
            }
            else
            {
                if(f(nums[left], a, b, c) > f(nums[right], a, b, c))
                {
                    res[idx] = f(nums[right], a, b, c);
                    right--;
                }
                else
                {
                    res[idx] = f(nums[left], a, b, c);
                    left++;
                }
                idx++;
            }
        }
        
        return res;
 
    }
    
    int f(int x, int a, int b, int c)
    {
        return a*x*x + b*x + c;
    }
    
   
};
