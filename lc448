448. Find All Numbers Disappeared in an Array   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 22354
Total Submissions: 41241
Difficulty: Easy
Contributors: yuhaowang001
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]

//Runtime: O(n)
//Space: O(1)

class Solution {
public:
    //use counting sort, nums[i] should be in index=nums[i]-1
    //if(nums[index]>0) means there is valid values in this position, assign that value to nums[i]
    // and set nums[index]=-1 to indicate there is a value index+1 at position index
    // keep doing the same thing for nums[i] until nums[nums[i]-1] does not have a valid number
    //then mark nums[i] as 0 to indicate this bucket is empty
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        
        if(nums.empty()) return vector<int>{};
        
        int n = nums.size();
        
        for(int i = 0; i < n; )
        {
            if(nums[i] > 0)
            {
                int index = nums[i]-1;
                
                if(nums[index] > 0)
                {
                    nums[i] = nums[index];
                    nums[index] = -1;
                }
                else
                {
                    nums[index]--;
                    nums[i] = 0;
                }
            }
            else
            {
                i++;
            }
        }
        
        vector<int> res;
        
        //when push back the result, index i means value=i+1 in this position
        for(int i = 0; i < n; i++)
        {
            if(nums[i] >= 0)
            {
                res.push_back(i+1);
            }
        }
        
        return res;
    }
};
