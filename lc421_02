421. Maximum XOR of Two Numbers in an Array   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 5927
Total Submissions: 14403
Difficulty: Medium
Contributors: shen5630
Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:

Input: [3, 10, 5, 25, 2, 8]

Output: 28

Explanation: The maximum result is 5 ^ 25 = 28.

//Runtime: O(n)
//Space: O(n)

class Solution {
public:
    class TrieNode
    {
    public:
        vector<TrieNode*> children;
        int value;
        TrieNode()
        :value(-1) 
        {
            children.assign(2, NULL);
        }
    };
    
    //思路：建立以msb开始的trie
    //每加入一个数，找trie中尽量与他每个bit不同的数
    int findMaximumXOR(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int n = nums.size();

        //now build trie and find max diff at the same time
        TrieNode* dummy = new TrieNode();
        int res = 0;
        
        for(int i = 0; i < n; i++)
        {
            int cur = nums[i];
            TrieNode* prev = dummy;
            TrieNode* maxdiff = dummy;
            for(int j = 31; j >=0; j--)
            {
                int bit = (cur>>j) & 1;
                
                if(prev->children[bit] == NULL)
                {
                    //cout << "bit is null\n";
                    prev->children[bit] = new TrieNode();
                }
                
                prev = prev->children[bit];
                //check if has max diff
                
                
                int diffbit = 1 ^ bit;
                //cout << "diffbit=" << diffbit << endl;
                if(maxdiff->children[diffbit] != NULL)
                {
                    maxdiff = maxdiff->children[diffbit];
                }
                else
                {
                    maxdiff = maxdiff->children[bit];
                }

            }
            
            prev->value = cur;
            
            //since all nums have the same length
            res = max(res, cur^(maxdiff->value));
            
        }
        
        return res;
    }
};
