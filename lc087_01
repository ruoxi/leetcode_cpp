87. Scramble String   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 56341
Total Submissions: 200515
Difficulty: Hard
Contributors: Admin
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.


//Runtime: O(n^4)
//Space: O(n^3)

class Solution {
public:
    //state: dp[len][i][j]表示s1[i...i+len-1] 和s2[j...j+len-1]是否是scramble string
    //function: dp[len][i][j] = dp[k][i][j] && dp[len-k][i+k-1][j+k-1] 
    //                          || dp[k][i][j+len-k] && dp[len-k][i+k-1][j]
    //initialization: dp[1][i][j] = s1[i] == s2[j]
    bool isScramble(string s1, string s2) {
        
        if(s1.empty() && s2.empty()) return true;
        if(s1.empty() || s2.empty()) return false;
        
        int n = s1.length(), m = s2.length();
        if(s1 == s2) return true;
        if(n !=m) return false;
        
        vector<vector<vector<bool>>> dp(n+1, vector<vector<bool>>( n, vector<bool>(n, false)));
        
        dp[0][0][0] = true;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                dp[1][i][j] = s1[i]==s2[j];
            }
        }
        
        for(int k = 2; k <=n; k++)
        {
            for(int i = 0; i <= n-k; i++)
            {
                for(int j = 0; j <= n-k; j++)
                {
                    for(int p = 1; p < k; p++)
                    {
                        if(dp[p][i][j] && dp[k-p][i+p][j+p] || dp[p][i][j+k-p] && dp[k-p][i+p][j])
                        {
                            dp[k][i][j] = true;
                            break;
                        }
                    }
                }
            }
        }
        
        return dp[n][0][0];
        
    }
};
