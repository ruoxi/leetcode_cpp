317. Shortest Distance from All Buildings   QuestionEditorial Solution  My Submissions
Total Accepted: 9462
Total Submissions: 29106
Difficulty: Hard
Contributors: Admin
You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.

class Solution {
public:
    //BFS. 
    //注意：这里需要对于每一个'1'都单独做一遍BFS
    //并且没走完一个1的相邻的0点之后，要把0改成-1， 
    //下一次就是从1开始，只有-1的点可以走
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    
    int bfs(vector<vector<int>>& grid, vector<vector<int>>& distance, int walk, int x, int y)
    {
        int mindist = -1;
        queue<pair<int, int>> q;
        q.push(make_pair(x, y ));
        
        int n = grid.size();
        int m = grid.at(0).size();
        int level = 0;
        while(!q.empty())
        {
            int levelsize = q.size();
            level++;
            for(int i = 0; i < levelsize; i++)
            {
                int curx = q.front().first;
                int cury = q.front().second;
                q.pop();
                //check neighbor
                for(int j = 0; j < 4; j++)
                {
                    int nextx = curx + dx[j];
                    int nexty = cury + dy[j];
                    
                    if(nextx >=0 && nextx < n && nexty >=0 && nexty < m && grid[nextx][nexty] == walk)
                    {
                        distance[nextx][nexty] += level;
                        grid[nextx][nexty]--;
                        
                        q.push(make_pair(nextx, nexty));
                        if(mindist < 0 || mindist > distance[nextx][nexty])
                        {
                            mindist = distance[nextx][nexty];
                        }
                    }
                }
            }
        }
        
        return mindist;
    }
    
    
    int shortestDistance(vector<vector<int>>& grid) {
        
        if(grid.empty() || grid.at(0).empty()) return -1;
        
        int n = grid.size(); 
        int m = grid.at(0).size();
    
        int mindist = -1;
        vector<vector<int>> distances(n, vector<int>(m, 0));
        //now bfs
        int walk = 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    mindist = bfs(grid, distances, --walk, i,j);
                }
                
            }
        }
        
        return mindist;
 
    }
};
