446. Arithmetic Slices II - Subsequence   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 1889
Total Submissions: 8796
Difficulty: Hard
Contributors: Samuri
A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequences:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.

A subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k ≥ 2.

The function should return the number of arithmetic subsequence slices in the array A.

The input contains N integers. Every integer is in the range of -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.


Example:

Input: [2, 4, 6, 8, 10]

Output: 7

Explanation:
All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]

//Runtime:O(n^2)
//Space: O(n^2) ????

class Solution {
public:
    //这里因为subsequence 可以不是连续的，所以dp需要增加一个维度，diff
    //state: vector<map<int,int>> dp, vector[i]表示以i点结尾的arithmetics有多少个，map<int, int> 表示key = diff的arithmetics slice有多少个,
    //注意这里的subsequence可以是两个，所以计算真正的个数的时候是看dp[j][diff]
    //function: dp[i][diff] = dp[j][diff]+1 where diff = A[i]-A[j]
    int numberOfArithmeticSlices(vector<int>& A) {
        if(A.size() < 3) return 0;
        
        int n = A.size();
        
        vector<map<int, int>> dp(n, map<int, int>());
        //set<int> table(A.begin(), A.end());
        
        int res = 0;
        for(int i = 0; i <n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                
                if(long(A[i]) - long(A[j]) > INT_MAX) continue;
                if(long(A[i]) - long(A[j]) < INT_MIN) continue;
                int diff = A[i] - A[j];
                dp[i][diff] +=1;
                if(dp[j].find(diff) != dp[j].end())
                {
                    //check before j how many A[j-diff] are in array
                    
                    dp[i][diff] += dp[j][diff];
                    res += dp[j][diff];
                }
                
            }
        }
        
        return res;
    }
};
