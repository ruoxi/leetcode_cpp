173. Binary Search Tree Iterator   QuestionEditorial Solution  My Submissions
Total Accepted: 68534
Total Submissions: 179342
Difficulty: Medium
Contributors: Admin
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    BSTIterator(TreeNode *root) {
        cur = root;
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        while(cur != NULL)
        {
            stk.push(cur);
            cur = cur->left;
        }
        
        return !stk.empty();
        
    }

    /** @return the next smallest number */
    int next() {
        cur = stk.top(); 
        stk.pop();
        
        int res = cur->val;
        cur = cur->right;
        return res;
        
    }
    
    stack<TreeNode*> stk;
    TreeNode* cur;
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
