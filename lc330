/*
330. Patching Array   QuestionEditorial Solution  My Submissions
Total Accepted: 16074
Total Submissions: 52052
Difficulty: Hard
Contributors: Admin
Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.

Example 1:
nums = [1, 3], n = 6
Return 1.

Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2:
nums = [1, 5, 10], n = 20
Return 2.
The two patches can be [2, 4].

Example 3:
nums = [1, 2, 2], n = 5
Return 0.
*/

class Solution {
public:
    //思路：miss为smallest number which may missing in sum [0...n]
    //表示已经可以组成[0, miss) 的所有数字，如果nums里下一个num <= miss, 则表示可以把这个区间extend成[0,miss+num)
    //如果下一个num > miss, 则表示[miss, num)这个区间达不到，那么这个时候就需要把miss加入到array中，可以把区间extend到[0, 2*miss]
    //这时候如果num <= 2*miss那么这个区间可以接着被extend到[0,2*miss+num]...
    //也可以这样理解，maxNum 表示能加到的最大数，
    // 当nums[i] <= maxNum,表示nums[i]可以用来extend 区间从[0, maxNum] 到[0, maxNum+nums[i]]; maxNum= maxNum+nums[i]
    //如果nums[i] > maxNum,表示没有办法加到maxNum+1， 所以这时候patch maxNum+1到array 中， 这样区间从[0, maxNum] extend到[0, maxNum+maxNum+1], maxNum = maxNum+maxNum+1
    int minPatches(vector<int>& nums, int n) {
        long miss = 1, add = 0, i = 0;
        
        while(miss <= n)
        {
            if(i < nums.size() && nums[i] <= miss)
            {
                miss += nums[i];
                i++;
            }
            else
            {
                miss += miss;
                add++;
            }
        }
        return add;
    }
};
