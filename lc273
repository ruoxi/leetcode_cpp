/*273. Integer to English Words   QuestionEditorial Solution  My Submissions
Total Accepted: 22990
Total Submissions: 112614
Difficulty: Hard
Contributors: Admin
Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.

For example,
123 -> "One Hundred Twenty Three"
12345 -> "Twelve Thousand Three Hundred Forty Five"
1234567 -> "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
Hint:

Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.
Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.
There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)
*/
//Sol: 注意处理whitespace, num < 20的数可以放在一起，


class Solution {
public:
    //input to this function is less than 1000
    vector<string> LessThanTwenty = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine","Ten","Eleven", "Twelve", "Thirteen", "Fourteen","Fifteen", "Sixteen","Seventeen", "Eighteen", "Nineteen"};
    vector<string> tens = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};

    string helper(int num)
    {
        string res="";
        if(num == 0) return "";
        if(num < 20)
        {
            res  = LessThanTwenty[num] + " ";
        }
        else if(num < 100)
        {
            res = tens[num/10] + " " + helper(num%10);
        }
        else
        {
            res = LessThanTwenty[num/100] + " Hundred " + helper(num%100);
        }
        return res;
    }
    string numberToWords(int num) {
        if(num == 0) return "Zero";
        vector<string> str = {"", "Thousand", "Million", "Billion"};

        int idx = 0;
        string res = "";
        while(num > 0)
        {
            if(num%1000 != 0)
            {
                res = helper(num%1000) + str[idx] + " " + res;
            }
            num = num/1000;
            
            idx++;
        }
        
        //remove leading and trailing whitespaces
        while(res[0] == ' ' )
        {
            res.erase(0, 1);
        }
        
        int n = res.length();
        while(res[n-1] == ' ')
        {
            res.erase(n-1, 1);
            n--;
        }
        return res;
        
    }
};
