305. Number of Islands II   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 16003
Total Submissions: 42233
Difficulty: Hard
Contributors: Admin
A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).

0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.

1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.

1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.

1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.

1 1 0
0 0 1   Number of islands = 3
0 1 0
We return the result as an array: [1, 1, 2, 3]


//Runtime: O(k)
//Space: O(k)

class Solution {
public:
    vector<int> dx = {1, -1 ,0, 0};
    vector<int> dy = {0, 0, 1, -1};
    vector<int> numIslands2(int m, int n, vector<pair<int, int>>& positions) {
        if(positions.empty()) return vector<int>();
        
        int k = positions.size();
        
        vector<int> res;
        unordered_map<int, int> father;
        int cnt = 0;
        for(int i = 0; i < k; i++)
        {
            int curx = positions[i].first;
            int cury = positions[i].second;
            
            int idx = curx*n+cury;
            cnt++;
            father[idx] = idx;
            for(int j = 0; j < 4; j++)
            {
                int nx = curx + dx[j];
                int ny = cury + dy[j];
                int nidx = nx*n+ny;
                if(nx >=0 && nx < m && ny>=0 && ny < n && father.find(nidx) != father.end())
                {
                    int rootc = find(father, idx);
                    int rootn = find(father, nidx);
                    
                    if(rootc != rootn)
                    {
                        cnt--;
                        father[rootc] = rootn;
                    }
                }
            }
            res.push_back(cnt);
            
        }
        
        return res;
    }
    
    int find(unordered_map<int, int>& father, int a)
    {
        int pa = father[a];
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        int roota = pa;
        pa = a;
        while(pa != father[pa])
        {
            int tmp = father[pa];
            father[pa] = roota;
            pa = tmp;
        }
        return roota;
    }
};
