/*
254. Factor Combinations
Numbers can be regarded as product of its factors. For example,
8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.
Note:
Each combination's factors must be sorted ascending, for example: The factors of 2 and 6 is [2, 6], not [6, 2].
You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Examples:
input: 1
output:
[]
input: 37
output:
[]
input: 12
output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
input: 32
output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]
*/


////similar to 39. Combination Sum
//given a array nums = {1,2, 3, 4} find all combinations for sum = 12, and same number can be used unlimited times
//这类题same number can be used unlimited times, 在call下一层dfs的时候，start index 不变，代表当前num[start]可以被重复取


class Solution {
public:

    void dfs(int n, vector<int>& sol, vector<vector<int>>& res, int start)
    {
        //这里只需要算到sqrt(n),所以不需要考虑{12}的情况   
        for(int i = start; i <=sqrt(n); i++)
        {
            if(n%i != 0) continue;

            //add i and n/i to res
            sol.push_back(i);
            sol.push_back(n/i);
            res.push_back(sol);
            //here pop out n/i, and call dfs again to see if we can get more factor from n/i
            sol.pop_back();
            dfs(n/i, sol, res, i);
            sol.pop_back();
        }
    }
    vector<vector<int>> getFactors(int n) {
        if(n <2) return vector<vector<int>>();
        
        vector<int> sol;
        vector<vector<int>> res;
        
        dfs(n, sol, res, 2);
        
        return res;
    }
};
