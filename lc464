464. Can I Win   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 1886
Total Submissions: 9532
Difficulty: Medium
Contributors: taylorty
In the "100 game," two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.

Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.

You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.

Example

Input:
maxChoosableInteger = 10
desiredTotal = 11

Output:
false

Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.

class Solution {
public:
    //memorization
    //because the maximum number is 20, we can use a 32 bit integer to note which number has been chosen
    //eg. if max number is 5 and visited array is {true, false, true, true, false} --> the binary representation is 10110
    bool canIWin(int maxChoosableInteger, int desiredTotal) {
        
        int sum = (1 + maxChoosableInteger)*maxChoosableInteger/2;
        if(sum < desiredTotal) return false;
        if(desiredTotal <=0) return true;
        
        //this saves the calculated result
        //key is integer representation of used num
        //bool is if first player can win
        unordered_map<int, bool> cache;
        
        vector<bool> visited(maxChoosableInteger+1, false);
        
        return helper(desiredTotal, cache, visited);
        
        
    }
    
    
    
    bool helper(int total, unordered_map<int, bool>& cache, vector<bool>& visited)
    {
        if(total <= 0) return false;
        int key = getkey(visited);
        
        if(cache.find(key) != cache.end()) return cache[key];
        
        for(int i = 1; i < visited.size(); i++)
        {
            if(visited[i]) continue;
            
            visited[i] = true;
            
            //check if this leads to a win-> second player lose
            if(!helper(total-i, cache, visited))
            {
                cache[key] = true;
                visited[i] = false;
                return true;
            }
            
            visited[i] = false;
            
        }
        
        cache[key] = false;
        return false;
    }
    
    int getkey(vector<bool>& visited)
    {
        int res = 0;
        int mask = 1;
        
        for(int i = 1; i < visited.size(); i++)
        {
 
            if(!visited[i]) continue;
            res |= mask << i;
        }
        
        return res;
    }
};
