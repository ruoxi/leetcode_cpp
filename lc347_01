347. Top K Frequent Elements   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 43648
Total Submissions: 95556
Difficulty: Medium
Contributors: Admin
Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

//Runtime: O(n)
//Space: O(n)

class Solution {
public:

    //sort based on frequency
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.empty()) return vector<int>();
        
        //key is nums[i], value is frequency
        unordered_map<int, int> table;
        
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            table[nums[i]]++;
        }
        
        vector<vector<int>> freq(n+1, vector<int>());
        
        for(auto num : table)
        {
            freq[num.second].push_back(num.first);
        }
        
        vector<int> res;
        for(int i = n; i>=0 && res.size() < k; i--)
        {
            if(freq[i].empty()) continue;
            
            for(int j = 0; j < freq[i].size(); j++)
            {
                res.push_back(freq[i][j]);
                if(res.size() == k)
                {
                    break;
                }
            }
        }
        
        return res;
        
    }
};
