416. Partition Equal Subset Sum   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 8904
Total Submissions: 24100
Difficulty: Medium
Contributors: Admin
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.
Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

//Runtime: O(n*target)
//Space: O(target)

class Solution {
public:
    //背包类dp
    //state: dp[i][v]表示前i个num中选取一些组成和为v
    //function: dp[i][v] = dp[i-1][v-nums[i]]
    //initialization: dp[0][0] = true, dp[i][0] = true
    bool canPartition(vector<int>& nums) {
        if(nums.empty()) return false;
        
        int n = nums.size();
        
        int target = 0;
        for(int i = 0; i < n; i++)
        {
            target += nums[i];
        }
        
        if(target%2 == 1) return false;
        
        target = target/2;
        
        vector<vector<bool>> dp(2, vector<bool>(target+1, false));
        
        for(int i = 0; i <2; i++)
        {
            dp[i][0] = true;
        }
        
        
        for(int i = 1; i <=n; i++)
        {
            for(int j = target; j>= nums[i-1]; j--)
            {

                dp[i%2][j] = dp[(i-1)%2][j] || dp[(i-1)%2][j-nums[i-1]];
            }
            if(dp[i%2][target]) return true;
        }
        
        return false;
        
        
    }
};
