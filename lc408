/*408. Valid Word Abbreviation   QuestionEditorial Solution  My Submissions
Total Accepted: 2079
Total Submissions: 7857
Difficulty: Easy
Contributors: Admin
Given a non-empty string s and an abbreviation abbr, return whether the string matches with the given abbreviation.

A string such as "word" contains only the following valid abbreviations:

["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Notice that only the above abbreviations are valid abbreviations of the string "word". Any other string is not a valid abbreviation of "word".

Note:
Assume s contains only lowercase letters and abbr contains only lowercase letters and digits.

Example 1:
Given s = "internationalization", abbr = "i12iz4n":

Return true.
Example 2:
Given s = "apple", abbr = "a2e":

Return false.
*/




class Solution {
public:
    bool validWordAbbreviation(string word, string abbr) {
        if(word.empty() && abbr.empty()) return true;
        
        int n = word.length();
        int m = abbr.length();
        
        int start = 0;
        int i = 0; int j = 0;
        for(; i < n && j < m; )
        {
            if(word[i] == abbr[j])
            {
                i++;
                j++;
                continue;
            }
            
            if(abbr[j] <='0' || abbr[j] > '9') 
            {
                return false;
            }
            
            int start = j;
            int num = 0;
            while(abbr[j] >= '0' && abbr[j] <= '9')
            {
                num = num*10 + abbr[j]-'0';
                j++;
            }
            
            //此处需要注意i已经指在第一个word和abbr不同的地方,所以不需要再加1
            i += num;
            
            
        }
        
        return i == n && j == m;
    }
};
