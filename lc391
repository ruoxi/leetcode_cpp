391. Perfect Rectangle   QuestionEditorial Solution  My Submissions
Total Accepted: 4547
Total Submissions: 20866
Difficulty: Hard
Contributors: Admin
Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.

Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).


Example 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

Return true. All 5 rectangles together form an exact cover of a rectangular region.

Example 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

Return false. Because there is a gap between the two rectangular regions.

Example 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

Return false. Because there is a gap in the top center.

Example 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

Return false. Because two of the rectangles overlap with each other.

class Solution {
public:
    //思路：1.最终的大矩形的面积是所有小矩形面积的和
    //2. 中间的点出现偶数次，大矩形的最终四个点则只出现一次
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        
        int x1 = INT_MAX;
        int x2 = INT_MIN;
        int y1 = INT_MAX;
        int y2 = INT_MIN;
        
        int area = 0;
        unordered_set<string> points;
        for(int i = 0; i <rectangles.size(); i++)
        {
            x1 = min(x1, rectangles[i][0]);
            x2 = max(x2, rectangles[i][2]);
            y1 = min(y1, rectangles[i][1]);
            y2 = max(y2, rectangles[i][3]);
            
            
            area += (rectangles[i][3] - rectangles[i][1]) *(rectangles[i][2] - rectangles[i][0]);
            
            string curp1 = to_string(rectangles[i][0]) + " " + to_string(rectangles[i][1]);
            string curp2 = to_string(rectangles[i][2]) + " " + to_string(rectangles[i][1]);
            string curp3 = to_string(rectangles[i][0]) + " " + to_string(rectangles[i][3]);
            string curp4 = to_string(rectangles[i][2]) + " " + to_string(rectangles[i][3]);
            
            pair<unordered_set<string>::iterator,bool> insert_res;
            insert_res = points.insert(curp1);
            if(insert_res.second == false) 
            {
                points.erase(curp1);
            }
            insert_res = points.insert(curp2);
            if(insert_res.second == false) 
            {
                points.erase(curp2);
            }
            insert_res = points.insert(curp3);
            if(insert_res.second == false) 
            {
                points.erase(curp3);
            }
            insert_res = points.insert(curp4);
            if(insert_res.second == false) 
            {
                points.erase(curp4);
            }
           
        }
        
        string p1 = to_string(x1) + " " + to_string(y1);
        string p2 = to_string(x1) + " " + to_string(y2);
        string p3 = to_string(x2) + " " + to_string(y1);
        string p4 = to_string(x2) + " " + to_string(y2);
        if(points.find(p1) == points.end() || points.find(p2) == points.end() || points.find(p3) == points.end() || points.find(p4) == points.end() || points.size() != 4)
        {
            return false;
        }
        
        return area == (y2-y1)*(x2-x1);
        
    }
};
