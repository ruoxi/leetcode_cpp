130. Surrounded Regions   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 70183
Total Submissions: 402771
Difficulty: Medium
Contributors: Admin
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X


//Runtime:O(nm)
//Space: O(nm)

class Solution {
public:
    //solution: all 'O's connected to bounary is not surrounded by 'X'
    //so figure out all those 'O's first and mark them as W
    //then flip all the rest 'O's to 'X'
    //finally flip all 'W' to 'O'
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    void solve(vector<vector<char>>& board) {
        if(board.empty() || board.at(0).empty()) return;
        
        int n = board.size();
        int m = board.at(0).size();
        
        queue<pair<int, int>> q;

        
        for(int i = 0; i <n; i++)
        {
            if(board[i][0] == 'O')
            {
                q.push(make_pair(i, 0));
                board[i][0] = 'W';
            }
            
            if(board[i][m-1] == 'O')
            {
                q.push(make_pair(i, m-1));
                board[i][m-1] = 'W';
            }
        }
        
        for(int j = 0; j < m; j++)
        {
            if(board[0][j] == 'O')
            {
                q.push(make_pair(0, j));
                board[0][j] = 'W';
            }
            
            if(board[n-1][j] == 'O')
            {
                q.push(make_pair(n-1, j));
                board[n-1][j] = 'W';
            }
        }
        
        while(!q.empty())
        {
            int curx = q.front().first;
            int cury = q.front().second;
            
            q.pop();
            
            for(int i = 0; i < 4; i++)
            {
                int nx = curx + dx[i];
                int ny = cury + dy[i];
                
                if(nx >=0 && nx < n && ny >=0 && ny < m && board[nx][ny] == 'O')
                {
                    board[nx][ny] = 'W';
                    q.push(make_pair(nx, ny));
                }
            }
        }
        
        //now mark the rest O to X
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
            }
        }
        
        //then mark all W to O
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(board[i][j] == 'W')
                {
                    board[i][j] = 'O';
                }
            }
        }
        
    }
};
