103. Binary Tree Zigzag Level Order Traversal   QuestionEditorial Solution  My Submissions
Total Accepted: 79677
Total Submissions: 252105
Difficulty: Medium
Contributors: Admin
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(root == NULL) return vector<vector<int>>();
        
        stack<TreeNode*> curlevel;
        
        curlevel.push(root);
        
        bool isreverse = true;
        
        vector<vector<int>> res;
        
        while(!curlevel.empty())
        {
            stack<TreeNode*> nextlevel;
            vector<int> level;
            while(!curlevel.empty())
            {
                TreeNode* node = curlevel.top();
                curlevel.pop();
                level.push_back(node->val);
                
                if(isreverse)
                {
                    if(node->left != NULL)
                    {
                        nextlevel.push(node->left);
                    }
                    if(node->right != NULL)
                    {
                        nextlevel.push(node->right);
                    }
                }
                else
                {
                    if(node->right != NULL)
                    {
                        nextlevel.push(node->right);
                    }
                    if(node->left != NULL)
                    {
                        nextlevel.push(node->left);
                    }
                }
                
            }
            
            res.push_back(level);
            isreverse = !isreverse;
            curlevel = nextlevel;
        }
        
        return res;
    }
};
