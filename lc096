96. Unique Binary Search Trees   QuestionEditorial Solution  My Submissions
Total Accepted: 102639
Total Submissions: 260224
Difficulty: Medium
Contributors: Admin
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


//Runtime: O(n^2)
//Space: O(n)

class Solution {
public:
    //let G(n) means number of unique BST constructed for [1...n]
    //F(i, n) means root is i, unique BST constructed for [1...n] where 1 <= i <= n
    //G(n) = F(1, n)+ F(2, n) + F(3, n) + ...+F(n, n)
    //F(i,n) = G(i-1) * G(n-i) -->this means bst with root i determined by its left subtree [1...i-1] and right subtree[i+1...n], the number of left subtree is G(i-1), tricky part is number of right subtree == G(n-i)
    //-->this means number of trees for [1...n-i] is the same as [i+1 ... n]
    //then we have G(n) = G(0)*G(n-1) + G(1)*G(n-2) + ... + G(n-1)*G(0)
    //base case G(0) = 1, G(1) = 1
    int numTrees(int n) {
        if(n == 0 || n == 1) return 1;
        
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i = 2; i <=n; i++)
        {
            for(int j = 1; j <=i; j++)
            {
                dp[i] += dp[j-1]*dp[i-j];
            }
        }
        
        return dp[n];
    }
};
