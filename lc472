472. Concatenated Words   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 1419
Total Submissions: 4796
Difficulty: Hard
Contributors: fishercoder
Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.


class Solution {
public:
 
    //sort the words based on length, 
    //when iterate through each word, only need to check if it can be combined using previous words
    //use word break dp solution
    
    class Comparator
    {
    public:
        bool operator()(string& a ,string& b)
        {
            if(a.length() != b.length())
            {
                return a.length() < b.length();
            }
            
            return a<b;
        }
    };
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        
        
        if(words.empty()) return vector<string>();
        
        int n = words.size();
        
        sort(words.begin(), words.end(), Comparator());
        unordered_set<string> dict;
        
        vector<string> res;
        int minLength = words[0].length();
        for(int i = 0; i < n; i++)
        {
            if(canForm(words[i], dict, minLength))
            {
                res.push_back(words[i]);
            }
            dict.insert(words[i]);
        }
        
        return res;
        
        
    }
    
    
    bool canForm(string& word, unordered_set<string>& dict, int minLength)
    {
        if(dict.empty()) return false;
        
        int n = word.length();
        vector<bool> dp(n+1, false);
        dp[0] = true;
        
        //cout << "word=" << word << " minLength=" << minLength << endl;
        for(int i = 1; i <= n; i++)
        {
            for(int j = i-minLength+1; j>=1; j--)
            {
                
                string sub = word.substr(j-1, i-j+1);
                //cout << "i = " << i << " j =" << j << " sub=" << sub << " dp[j-1]=" << dp[j-1] << endl;
                if(dict.find(sub) != dict.end() && dp[j-1])
                {
                    //cout << "dp[" << i << "] is true \n";
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[n];
    }
    
    
    
    
};
