/*385. Mini Parser   QuestionEditorial Solution  My Submissions
Total Accepted: 6429
Total Submissions: 22278
Difficulty: Medium
Contributors: Admin
Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note: You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].
Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.
Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.
*/



class Solution {
public:
    NestedInteger deserialize(string s) {
        
        if(s.empty()) return NestedInteger();
        if(s[0] != '[') return NestedInteger(stoi(s));
        
        //Get first integer
        NestedInteger* cur = NULL;
        int num = 0;
        stack<NestedInteger*> stk;
        int start = 0;
        for(int i = 0; i < s.length(); i++)
        {
            char c = s[i];
            if(c == '[')
            {
                if(cur != NULL)
                {
                    stk.push(cur);
                }
                start = i+1;
                cur = new NestedInteger();
            }
            else if(c==']')
            {
                //cur = new NestedInteger(num);
                //check if there is any number here
                string sub = s.substr(start, i-start);
                if(!sub.empty())
                {
                    NestedInteger* tmp = new NestedInteger(stoi(sub));
                    cur->add(*tmp);
                }
                
                if(!stk.empty())
                {
                    NestedInteger* prev = stk.top(); stk.pop();
                    prev->add(*cur);
                    cur = prev;
                }
                start = i+1;
                
            }
            else if(c==',')
            {
                if(s[i-1] != ']')
                {
                    //need to add num to cur
                    string sub = s.substr(start, i-start);
                    if(!sub.empty())
                    {
                        NestedInteger* tmp = new NestedInteger(stoi(sub));
                        cur->add(*tmp);
                    }
                    
                }
                start = i+1;
            }
          
        }
        return *cur;
    }
};
