57. Insert Interval   QuestionEditorial Solution  My Submissions
Total Accepted: 74320
Total Submissions: 289025
Difficulty: Hard
Contributors: Admin
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Show Company Tags
Show Tags
Show Similar Problems



/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval insert) {
        if(intervals.empty()) {
            return vector<Interval>{insert};
        }
        int n = intervals.size();
        if(intervals[n - 1].end < insert.start) {
            vector<Interval> res = intervals;
            res.push_back(insert);
            return res;
        }
        if(intervals[0].start > insert.end) {
            vector<Interval> res;
            res.push_back(insert);
            for(int i = 0; i < n; i++) {
                res.push_back(intervals[i]);
            }
            return res;
        }
        vector<Interval> res;
        int pindex = binarySearch1(intervals, insert.start);
        int eindex = binarySearch2(intervals, insert.end);
        
        if(pindex != -1) {
            for(int i = 0; i <=pindex; i++) {
                res.push_back(intervals[i]);
            }
        }

        int start = min(insert.start, intervals[pindex+1].start);
        int end = max(insert.end, intervals[eindex-1].end);
        res.push_back(Interval(start, end));

        if(eindex != n) {
            for(int i = eindex; i < n; i++) {
                res.push_back(intervals[i]);
            }
        }
        return res;
    }
    
    int binarySearch1(vector<Interval> &intervals, int target) {
        int n = intervals.size();
        int start = 0;
        int end = n - 1;
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(intervals[mid].end < target) {
                start = mid;
            }
            else
            {
                end = mid;
            }
        }
        if(intervals[end].end < target) {
            return end;
        }
        if(intervals[start].end < target) {
            return start;
        }
        return -1;
    }
    
    int binarySearch2(vector<Interval> &intervals, int target) {
        int n = intervals.size();
        int end = n - 1;
        int start = 0;
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(intervals[mid].start <= target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if(intervals[start].start > target) {
            return start;
        }
        if(intervals[end].start > target) {
            return end;
        }
        return n;
    }
};
