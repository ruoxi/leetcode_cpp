97. Interleaving String   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 61325
Total Submissions: 257552
Difficulty: Hard
Contributors: Admin
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

Show Tags

class Solution {
public:
    //state: dp[i][j]表示s1[0...i-1]与s2[0...j-1]能组成s3[0...i+j-1]
    //function: dp[i][j] = dp[i-1][j] if s1[i-1] == s3[i+j-1]
    //                   = dp[i][j-1] if s2[j-1] == s3[i+j-1]
    //initialization: dp[0][0] = true
    //                dp[0][i] = s2[i-1] == s3[i-1] && dp[0][i-1]
    //                dp[i][0] = s1[i-1] == s3[i-1] && dp[i-1][0]
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.empty()) return s2 == s3;
        if(s2.empty()) return s1 == s3;
        
        int n = s1.length(), m = s2.length(), k = s3.length();
        
        if(n+m != k) return false;
        
        vector<vector<int>> dp(2, vector<int>(m+1, false));
        
        dp[0][0] = true;
        
  
        
        for(int i = 1; i <=m; i++)
        {
            dp[0][i] = s2[i-1] == s3[i-1] && dp[0][i-1];
        }
        
        for(int i = 1; i <=n; i++)
        {
            dp[i%2][0] = s1[i-1] == s3[i-1] && dp[(i-1)%2][0];
            for(int j = 1; j <=m; j++)
            {
                dp[i%2][j] = false;
                if(s1[i-1] == s3[i+j-1])
                {
                    dp[i%2][j] = dp[i%2][j] || dp[(i-1)%2][j];
                }
                
                if(s2[j-1] == s3[i+j-1])
                {
                    dp[i%2][j] = dp[i%2][j] || dp[i%2][j-1];
                }
            }
        }
        
        return dp[n%2][m];
    }
};
