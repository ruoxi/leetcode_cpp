331. Verify Preorder Serialization of a Binary Tree   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 29086
Total Submissions: 82415
Difficulty: Medium
Contributors: Admin
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false

Credits:
Special thanks to @dietpepsi for adding this problem and creating all test cases.


class Solution {
public:
    //scan from left to right
    //if preorder[pos] is not #, push it to stack
    //if preorder[pos] is #, check if stack.top() == #, 
    //if so pop # from stack and pop one number, keep do this while stack is not #, then push # to
    //stack to indicate left subtree completes
    //if not, push # into stack
    bool isValidSerialization(string preorder) {
        if(preorder.empty()) return true;
        
        stack<string> stk;
        
        preorder.push_back(',');
        int n = preorder.length();
        
        string cur = "";
        for(int i = 0; i <n; i++)
        {
            //cout << "i=" << i << " cur=" << cur << endl;
            if(preorder[i] == ',')
            {
                while(cur == "#" && !stk.empty() && stk.top() == "#")
                {
                    stk.pop();
                    if(stk.empty()) return false;
                    stk.pop();
                }
                
                stk.push(cur);
                cur = "";
            }
            else
            {
                cur += preorder[i];
            }
        }
        
        //then finally stack should only have one #
        return stk.size() == 1 && stk.top() == "#";
    }
};
