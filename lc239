239. Sliding Window Maximum   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 46250
Total Submissions: 148039
Difficulty: Hard
Contributors: Admin
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


class Solution {
public:
    //use deque
    //when add an element to end of deque, check if the last item is smaller than element, remove from back if it is smaller, otherwise add to end of deque
    //if an element is outside window, pop from front
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        if(nums.empty() || k == 0) return vector<int>();
        
        int n = nums.size();
        
        deque<int> dq;
        vector<int> res;
        for(int i = 0; i < n; i++)
        {
            if(dq.empty())
            {
                dq.push_back(i);
            }
            else
            {
                while(!dq.empty() && nums[dq.back()] < nums[i])
                {
                    dq.pop_back();
                }
                
                dq.push_back(i);
            }
            
            if(dq.front() <= i-k)
            {
                dq.pop_front();
            }
            
            if(i>=k-1)
            {
                res.push_back(nums[dq.front()]);
            }
            
        }
        
        return res;
    }
};
