269. Alien Dictionary   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 18916
Total Submissions: 84427
Difficulty: Hard
Contributors: Admin
There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

For example,
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Note:
You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.


class Solution {
public:
    //build a graph based on the adjcent words
    //then do BFS
    string alienOrder(vector<string>& words) {
        if(words.empty()) return "";
        if(words.size() == 1) return words[0];
        
        unordered_map<char, set<char>> graph;
        int n = words.size();
        
        unordered_map<char, int> indegree;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < words[i].length(); j++)
            {
                indegree[words[i][j]] = 0;
            }
        }
        
        for(int i = 1; i < n; i++)
        {
            //find the first char not equal between the two string
            string first = words[i-1];
            string second = words[i];

            int minlen = min(first.length(), second.length());
            int j = 0;
            for(; j < minlen; j++)
            {
                if(first[j] != second[j])
                {
                    //Note::this line prevents duplicate edges
                    if(graph[first[j]].find(second[j]) != graph[first[j]].end()) break;
                    graph[first[j]].insert(second[j]);
                    
                    indegree[second[j]]++;
                    break;

                }
            }
            //this line means [wrjtk, wrj] is invalid because if two words has same prefix, the shortest one should always be the first
            if(j == minlen && first.length() >second.length()) return "";
        }
            
        //go through the indegree to find the one is zero
       
        queue<char> q;
        for(auto in : indegree)
        {
            if(in.second == 0)
            {
                q.push(in.first);
 
            }
        }
            
            
        string res= "";
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                char cur = q.front();
                q.pop();
                res += cur;
                for(auto next : graph[cur])
                {                        
                    indegree[next]--;
                    if(indegree[next] == 0)
                    {
                        q.push(next);
                    }
                }
                
                
            }
        }
        
        //make sure you check this, no cycle in the graph
        if(res.length() != indegree.size()) return "";
        return res;
        
        
    }
};
