23. Merge k Sorted Lists   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 121642
Total Submissions: 471856
Difficulty: Hard
Contributors: Admin
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //Runtime: O(nlogn)
 //Space: O(n)
 
class Solution {
public:

    class Comparator
    {
    public:
        bool operator()(const ListNode* a, const ListNode* b)
        {
            return a->val > b->val;
        }
    };
    
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        
        ListNode dummy(-1);
        ListNode* prev = &dummy;
        
        int n = lists.size();
        priority_queue<ListNode*, vector<ListNode*>, Comparator> pq;
        
        for(int i = 0; i < n; i++)
        {
            if(lists[i] == NULL) continue;
            pq.push(lists[i]);
        }
        
        while(!pq.empty())
        {
            ListNode* cur = pq.top();
            pq.pop();
            
            prev->next = cur;
            prev= prev->next;
            
            if(cur->next != NULL)
            {
                pq.push(cur->next);
            }
        }
        
        return dummy.next;
    }
};
