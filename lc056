56. Merge Intervals   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 102953
Total Submissions: 359847
Difficulty: Medium
Contributors: Admin
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
 //Runtime: O(nlogn)
 //Space: O(1)

class Solution {
public:

    class Comparator
    {
    public:
        bool operator()(const Interval& a, const Interval& b)
        {
            if(a.start != b.start) return a.start < b.start;
            return a.end < b.end;
        }
    };
    
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size() < 2) return intervals;
        
        int n = intervals.size();
        
        sort(intervals.begin(), intervals.end(), Comparator());
        
        int start = intervals[0].start;
        int end = intervals[0].end;
        
        vector<Interval> res;
        
        for(int i =1; i < n; i++)
        {
            Interval cur = intervals[i];
            if(cur.start > end)
            {
                res.push_back(Interval(start, end));
                start = cur.start;
                end = cur.end;
            }
            else
            {
                end = max(end, cur.end);
            }
        }
        
        res.push_back(Interval(start, end));
        
        return res;
        
    }
};
