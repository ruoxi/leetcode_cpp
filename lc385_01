385. Mini Parser   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 10355
Total Submissions: 34717
Difficulty: Medium
Contributors: Admin
Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note: You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].
Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.
Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.


/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    NestedInteger deserialize(string s) {
        
        if(s.empty()) return NestedInteger();
        
        if(s[0] != '[') return NestedInteger(stoi(s));
        
        stack<NestedInteger> stk;
        
        
        int n = s.length();
        string curStr = "";
        int cur = 0;
        bool neg = false;
        for(int i = 0; i < n; i++)
        {
            //cout <<"s[" << i << "]=" << s[i] << "cur=" << cur << endl;
            if((i==0 || s[i-1] != ']') &&s[i] == ',')
            {
                if(neg) cur = -cur;
                NestedInteger curNest(cur);
                
                stk.top().add(curNest);
                cur = 0;
                curStr = "";
                neg = false;
            }
            else if(s[i] == '[')
            {
                NestedInteger top;
                stk.push(top);
            }
            else if(s[i] == ']')
            {
                if(curStr != "")
                {
                    //cout << "i=" << i << " cur=" << cur << "curStr=" << curStr<< endl;
                    if(neg) cur = -cur;
                    NestedInteger curNest(cur);
                    stk.top().add(curNest);
                    
                    curStr = "";
                    cur = 0;
                    neg = false;
                    
                }
                
                NestedInteger last = stk.top();
                stk.pop();
                    
                if(!stk.empty())
                {
                    stk.top().add(last);
                }
                else
                {
                    stk.push(last);
                }

            }
            else if(s[i] == '+')
            {
                neg = false;
            }
            else if(s[i] == '-')
            {
                neg = true;
            }
            else if(s[i] == ',')
            {
                continue;
            }
            else
            {
                //cout << "i=" << i << " s[i]=" << s[i] << " curStr=" << curStr << endl;
                cur  = cur*10 + s[i] -'0';
                curStr += s[i];
            }
        }
        
        return stk.top();
        
    }
};
