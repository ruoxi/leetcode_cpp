399. Evaluate Division   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 9334
Total Submissions: 23492
Difficulty: Medium
Contributors: Admin
Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.


//Build a directed graph and calculate the weight
//use DFS to get the result
//note how to handle visited vector in dfs

class Solution {
public:
    //build a directed graph with weight if a/b = 2, b/a = 0.5
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        
        
        //key is source node, value is a list of edges and their weights
        unordered_map<string, unordered_map<string, double>> graph;
        unordered_map<string, bool> visited;
        
        for(int i = 0; i < equations.size(); i++)
        {
            string source = equations[i].first;
            string dest = equations[i].second;
            double value = values[i];
            graph[source][dest] = value;
            
            double rvalue = 1.0/value;
            
            graph[dest][source] = rvalue;
            //cout << "dest=" << dest << "source=" << source << "rvalue=" << rvalue << endl;
            visited[source] = false;
            visited[dest] = false;
        }
        
        vector<double> res;
        
        for(int i = 0; i < queries.size(); i++)
        {
            string source = queries[i].first;
            string dest = queries[i].second;
            
            if(graph.find(source) == graph.end() || graph.find(dest) == graph.end())
            {
                res.push_back(-1.0);
                continue;
            }
            
            if(source == dest) 
            {
                res.push_back(1.0);
                continue;
            }
            //check if there is a path from source to dest DFS
            
            double ans = dfs(graph, source, dest, visited);
            res.push_back(ans);
            
        }
        
        return res;
        
        
        
    }
    
    double dfs(unordered_map<string, unordered_map<string, double>>& graph, string source, string dest, unordered_map<string, bool>& visited)
    {
        visited[source] = true;
        //cout << "source=" << source << endl;
        
        double res = -1.0;
        for(auto nextPair : graph[source])
        {
            
            string next = nextPair.first;
            //cout << "next=" << next << " v=" << nextPair.second << endl;
            if(visited[next]) continue;
            
            double v = nextPair.second;
            
            if(next == dest) 
            {
                res = v;
                break;
            }
            
            double ans = dfs(graph, next, dest, visited);
            //cout << "ans=" << res << endl;
            if(ans != -1.0)
            {
                res = ans*v;
                break;
            }
  
        }
        
        visited[source] = false;
        return res;
    }
    
    
};
