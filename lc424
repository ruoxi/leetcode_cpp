424. Longest Repeating Character Replacement   QuestionEditorial Solution  My Submissions
Total Accepted: 2574
Total Submissions: 6823
Difficulty: Medium
Contributors: Admin
Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.

Example 1:

Input:
s = "ABAB", k = 2

Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input:
s = "AABABBA", k = 1

Output:
4

Explanation:
Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.

class Solution {
public:
    //sliding window
    //with out k constraint, 
    //Given a string convert it to a string with all same characters with minimal changes.
    //= length of the entire string - number of times of the maximum occurring character in the string
    //with k constraint
    //(length of substring - number of times of the maximum occurring character in the substring) <= k in a sliding window
    int characterReplacement(string s, int k) {
        
        vector<int> cnt(26, 0);
        
        int maxOccur = 0;
        
        int start = 0;
        int n = s.length();
        int res = 0;
        for(int end = 0; end < n; end++)
        {
            cnt[s[end]-'A']++;
            maxOccur= max(maxOccur, cnt[s[end]- 'A']);
            
            //check if need to shrink window
            while(end - start + 1 -maxOccur > k)
            {
                //move left side of window
                if(maxOccur == cnt[s[start] -'A'])
                {
                    maxOccur--;
                }
                cnt[s[start]-'A']--;
                start++;
                
                for(int i = 0 ; i < 26; i++)
                {
                    if(cnt[i] > maxOccur)
                    {
                        maxOccur = cnt[i];
                    }
                }
            }
            res = max(res, end - start+1);
        }
        
        return res;
    }
};
