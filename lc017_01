//Given a digit string, return all possible letter combinations that the number could represent.
//Input:Digit string "23"
//Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
//Note:
//Although the above answer is in lexicographical order, your answer could be in any order you want.


class Solution {
public:

    void dfs(string digits, vector<string>& numbermap, int start, string& sol, vector<string>& res)
    {
        if(start == digits.length())
        {
            res.push_back(sol);
            return;
        }
        
        string cur = numbermap[digits[start]-'0'];
        for(int i = 0; i < cur.length(); i++)
        {
            sol.push_back(cur[i]);
            
            dfs(digits, numbermap, start+1, sol, res);
            sol.pop_back();
        }
    }
    vector<string> letterCombinations(string digits) {
        vector<string> numbermap = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        if(digits.empty()) return vector<string>();
        
        vector<string> res;
        string sol;
        dfs(digits, numbermap, 0, sol, res);
        return res;
    }
};
