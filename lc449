449. Serialize and Deserialize BST   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 3841
Total Submissions: 8985
Difficulty: Medium
Contributors: ben65
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

Show Company Tags
Show Tags
Show Similar Problems



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL) return " ";
        
        ostringstream oss;
        
        stack<TreeNode*> stk;
        stk.push(root);
        while(!stk.empty())
        {
            TreeNode* cur = stk.top();
            oss << cur->val << " ";
            stk.pop();
            if(cur->right != NULL)
            {
                stk.push(cur->right);
            }
            if(cur->left != NULL)
            {
                stk.push(cur->left);
            }
        }
        cout << oss.str() << endl;
        return oss.str();
    }

    // Decodes your encoded data to tree.
    //here note for tree 5 3 2 6 7, 3 and 2 will be left subtree of 5, 6&7 will be right subtree of 5
    TreeNode* deserialize(string data) {
        
        istringstream iss(data);
        
        vector<int> res;
        string cur = "";

        while(iss >> cur)
        {
            res.push_back(stoi(cur));
        }
        
        return deserializerHelper(res, 0, res.size()-1);
        
    }
    
    TreeNode* deserializerHelper(vector<int>& res, int start, int end)
    {
        if(start > end) return NULL;
        if(start == end)
        {
            TreeNode* root = new TreeNode(res[start]);
            return root;
        }
        
        TreeNode* root = new TreeNode(res[start]);
        
        //the left subtree of root is start+1 and the first int larger than or equal to root
        int pos = lower_bound(res, start+1, end, res[start]);
        
        TreeNode* left = deserializerHelper(res, start+1, pos-1);
        TreeNode* right = deserializerHelper(res, pos, end);
        //means all the res[start, end] are smaller than res[start]
        //no right subtree
        
        root->left = left;
        root->right = right;
        return root;

    }
    
    int lower_bound(vector<int>& res, int start, int end, int target)
    {

        
        while(start+1 < end)
        {
            int mid = start + (end - start)/2;
            
            if(res[mid] < target)
            {
                start = mid;
            }
            else
            {
                end = mid;
            }
        }
        
        if(res[start] >= target) return start;
        if(res[end] >= target) return end;
        
        return end+1;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
