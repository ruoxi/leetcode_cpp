277. Find the Celebrity   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 21311
Total Submissions: 60065
Difficulty: Medium
Contributors: Admin
Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.

Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: "Hi, A. Do you know B?" to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).

You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function should minimize the number of calls to knows.

Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return -1.

Show Company Tags
Show Tags



// Forward declaration of the knows API.
bool knows(int a, int b);

class Solution {
public:
    //start from anyone as candidate if knows(cand, i) returns true, means cand knows i, change cand to i
    //say after first loop candidate is person k
    //it means (0..k-1) can not be celebrity, they know other persons in this range
    // k does not know people in range (k+1, n), so people in (k+1..n) cannot be celebrity
    // it means k will be celebrity if there exists one
    // in the second loop
    //for people <k, we only need to check if they knows k and k does not know them
    //for people >k, we need to check they knows k
    int findCelebrity(int n) {
        
        int cand = 0;
        
        for(int i = 1; i < n; i++)
        {
            if(knows(cand, i))
            {
                cand = i;
            }
        }
        
        //check if there is a valid cand
        for(int i = 0; i < n; i++)
        {
            if(i < cand && (!knows(i, cand) || knows(cand, i)) ) return -1;
            if(i > cand && !knows(i, cand)) return -1;

        }
        
        return cand;
    }
};
