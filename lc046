//Given a collection of distinct numbers, return all possible permutations.

//For example,
//[1,2,3] have the following permutations:
//[
//  [1,2,3],
//  [1,3,2],
//  [2,1,3],
//  [2,3,1],
//  [3,1,2],
//  [3,2,1]
//]


class Solution {
public:

    void dfs(vector<int>& nums, vector<vector<int>>& res, vector<int>& sol, set<int>& visited)
    {
        if(sol.size() == nums.size())
        {
            res.push_back(sol);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(visited.find(nums[i]) != visited.end()) continue;
            
            sol.push_back(nums[i]);
            visited.insert(nums[i]);
            dfs(nums, res, sol, visited);
            sol.pop_back();
            visited.erase(nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        if(nums.empty()) return vector<vector<int>>();
        
        vector<vector<int>> res;
        vector<int> sol;
        set<int> visited;
        dfs(nums, res, sol, visited);
        
        return res;
    }
};
