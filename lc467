467. Unique Substrings in Wraparound String   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 1494
Total Submissions: 5438
Difficulty: Medium
Contributors: ramanjot
Consider the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so s will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".

Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.

Note: p consists of only lowercase English letters and the size of p might be over 10000.

Example 1:
Input: "a"
Output: 1

Explanation: Only the substring "a" of string "a" is in the string s.
Example 2:
Input: "cac"
Output: 2
Explanation: There are two substrings "a", "c" of string "cac" in the string s.
Example 3:
Input: "zab"
Output: 6
Explanation: There are six substrings "z", "a", "b", "za", "ab", "zab" of string "zab" in the string s.

//Runtime: O(N)
//Space: O(1)

class Solution {
public:
    //state: count[i]表示以'a'+i字母结尾的substring 有几个
    //function: count[i] = max(count[i], curlength), where curlength++ if A[i] - A[i-1] == 1 or A[i-1] - A[i] = 25
    //initialization: count[i] = 0
    int findSubstringInWraproundString(string p) {
        
        if(p.empty()) return 0;
        
        vector<int> count(26, 0);
        int n = p.length();
        int curlength = 0;
        for(int i = 0; i <n; i++)
        {
            if(i > 0 && (p[i] - p[i-1] == 1 || p[i-1] - p[i] == 25))
            {
                curlength++;
            }
            else
            {
                curlength = 1;
            }
            
            count[p[i]-'a'] = max(count[p[i]-'a'], curlength);
        }
        
        int res = 0;
        for(int i = 0; i <26; i++)
        {
            res += count[i];
        }
        
        return res;
    }
};
