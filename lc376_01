376. Wiggle Subsequence   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 15136
Total Submissions: 44275
Difficulty: Medium
Contributors: Admin
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.

For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.

Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.

Examples:
Input: [1,7,4,9,2,5]
Output: 6
The entire sequence is a wiggle sequence.

Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

Input: [1,2,3,4,5,6,7,8,9]
Output: 2
Follow up:
Can you do it in O(n) time?

Credits:
Special thanks to @agave and @StefanPochmann for adding this problem and creating all test cases.


class Solution {
public:
    //greedy：eg, 1,3, 4,6, 3, 2,3
    //这里先判断最开始两个看是升序还是降序
    //如果是升序，那么就len++,并且表明， 下一个要找降序
    //但是3， 后边跟的是4，6这里把3依次换成比它更大的数，以保证后面可以由更多的空间降序
    //eg. 1, 3, --> 1, 4--> 1, 6--> 1,6,3 如果不把最开始的3换成6的话，之后这个降序3就加不上去了
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        if(nums.size() == 1) return 1;
        
        int n = nums.size();
        
        int start = 0;
        
        //first get rid of all equal numbers at beginning
        while(start < n && nums[start+1] == nums[start])
        {
            start++;
        }
        
        
        if(start == n) return 1;
        
        bool increasing = nums[start+1] > nums[start];
        int res = 1;
        int prev = nums[start];
        
        for(int i = start+1; i <n; i++)
        {
            if(increasing)
            {
                if(prev < nums[i])
                {
                    res++;
                    increasing = !increasing;
                }
            }
            else
            {
                if(prev > nums[i])
                {
                    res++;
                    increasing = !increasing;
                }
            }
            
            prev = nums[i];
        }
        
        return res;
        
    }
};
