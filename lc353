353. Design Snake Game   QuestionEditorial Solution  My Submissions
Total Accepted: 4516
Total Submissions: 18196
Difficulty: Medium
Contributors: Admin
Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.

The snake is initially positioned at the top left corner (0,0) with length = 1 unit.

You are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.

Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.

When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.

Example:
Given width = 3, height = 2, and food = [[1,2],[0,1]].

Snake snake = new Snake(width, height, food);

Initially the snake appears at position (0,0) and the food at (1,2).

|S| | |
| | |F|

snake.move("R"); -> Returns 0

| |S| |
| | |F|

snake.move("D"); -> Returns 0

| | | |
| |S|F|

snake.move("R"); -> Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )

| |F| |
| |S|S|

snake.move("U"); -> Returns 1

| |F|S|
| | |S|

snake.move("L"); -> Returns 2 (Snake eats the second food)

| |S|S|
| | |S|

snake.move("U"); -> Returns -1 (Game over because snake collides with border)

class SnakeGame {
public:
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    //Note: because we need to consistently check head and tail use deque to store the body
    
    SnakeGame(int width, int height, vector<pair<int, int>> food) {
        rowSize = height;
        colSize = width;
        mfood = food;
        body.clear();
        bodyset.clear();
        body.push_back(0);
        bodyset.insert(0);
        foodidx = 0;
        dmap["U"] = 0;
        dmap["D"] = 1;
        dmap["L"] = 2;
        dmap["R"] = 3;
        score = 0;
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    int move(string direction) {
        //if score is -1 do nothing
        if(score == -1)
        {
            return -1;
        }
        
        //get cur head and compute next head based on direction
        int curheadx = body.front()/colSize;
        int curheady = body.front()%colSize;
    
        
        switch(dmap[direction])
        {
        case 0:
            curheadx--;
            break;
        case 1:
            curheadx++;
            break;
        case 2:
            curheady--;
            break;
        case 3:
            curheady++;
            break;
        }

        int nexthead = curheadx*colSize+curheady;
        
        //if out of boundary, return -1
        //if next head is in body, then return -1
        //head can move to tail, remove tail first
        bodyset.erase(body.back());

        if(curheadx <0 || curheadx >= rowSize || curheady < 0 || curheady >= colSize || bodyset.find(nexthead) != bodyset.end())
        {
            return -1;
        }
        
        body.push_front(nexthead);
        bodyset.insert(nexthead);
        //if nexthead is in position of food
        //increase score
        //add back tail, and add nexthead
        if(foodidx < mfood.size() && curheadx == mfood[foodidx].first && curheady == mfood[foodidx].second)
        {

            bodyset.insert(body.back());
            foodidx++;
            score++;
            return score;
        }
        
        //otherwise just remove tail and add new head
        body.pop_back();
        return score;
        
    }
    
private:
    deque<int> body;
    set<int> bodyset;
    int score;
    vector<pair<int, int>> mfood;
    int foodidx;
    int rowSize;
    int colSize;
    unordered_map<string, int> dmap;
};

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
