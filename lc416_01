416. Partition Equal Subset Sum   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 8906
Total Submissions: 24104
Difficulty: Medium
Contributors: Admin
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.
Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

//Runtime: O(n)
//Space: 200*100/2+1 bit

class Solution {
public:
    //背包类dp
    //state: dp[i][v]表示前i个num中选取一些组成和为v
    //function: dp[i][v] = dp[i-1][v-nums[i]]
    //initialization: dp[0][0] = true, dp[i][0] = true
    bool canPartition(vector<int>& nums) {
        if(nums.empty()) return false;
        
        int n = nums.size();
        
        //用bitset，每一位代表一个value
        //最右一位代表value=0
        const int MAX_ARRAY_SIZE = 200;
        const int MAX_NUM = 100;
        
        bitset<MAX_ARRAY_SIZE*MAX_NUM/2+1> bits(1);
        
        int sum = 0;
        for(int i = 0; i <n; i++)
        {
            sum += nums[i];
            //bits里已有的数，把他们每一个都+nums[i]相当于把bits向左移nums[i]位
            bits |= (bits<<nums[i]);
            
        }
        
        return (sum%2==0) && bits[sum/2];
        
    }
};
