300. Longest Increasing Subsequence   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 56218
Total Submissions: 151739
Difficulty: Medium
Contributors: Admin
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

Show Company Tags
Show Tags
Show Similar Problems

//Runtime: O(n^2)
//Space: O(n)

class Solution {
public:
    //坐标型dp
    //state: dp[i]表示从0点跳到第i点最多踩过多少个木桩
    //function: dp[i] = max(dp[j]+1) if nums[i] > nums[j]
    //initialization: dp[i] = 1
    int lengthOfLIS(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int n = nums.size();
        
        vector<int> dp(n, 1);
        int res = 1;
        for(int i =1; i <n; i++)
        {
            for(int j = i-1; j >=0; j--)
            {
                if(nums[j] < nums[i])
                {
                    dp[i] = max(dp[i], dp[j]+1);
                }
            }
            res = max(res, dp[i]);
        }
        
        
        return res;
        
        
        
    }
};
