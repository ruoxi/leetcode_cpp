34. Search for a Range   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 118349
Total Submissions: 383019
Difficulty: Medium
Contributors: Admin
Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

//Runtime: O(logn)
//Space: O(1)

class Solution {
public:
    //find first occurance of target and last occurance of target
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return {-1, -1};
        
        int first = findFirst(nums, target);
        int last = findLast(nums,target);
        
        vector<int> res;
        res.push_back(first);
        res.push_back(last);
        return res;
    }
    
    int findFirst(vector<int>& nums, int target)
    {
        int start = 0, end = nums.size()-1;
        
        while(start + 1 < end)
        {
            int mid = start + (end-start)/2;
            
            if(nums[mid] >= target)
            {
                end = mid;
            }
            else
            {
                start = mid;
            }
        }
        
        if(nums[start] == target) return start;
        if(nums[end] == target) return end;
        return -1;
    }
    
    int findLast(vector<int>& nums, int target)
    {
        int start = 0, end = nums.size()-1;
        
        while(start + 1 < end)
        {
            int mid = start + (end - start)/2;
            if(nums[mid] <= target)
            {
                start = mid;
            }
            else
            {
                end = mid;
            }
        }
        
        if(nums[end] == target) return end;
        if(nums[start] == target) return start;
        return -1;
    }
};
