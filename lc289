289. Game of Life   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 38836
Total Submissions: 106749
Difficulty: Medium
Contributors: Admin
According to the Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.

Follow up: 
Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

//Runtime: O(mn)
//Space: O(1)
class Solution {
public:
    //需要keep cur status和next status
    //1 means live, 0 means dead, 01 => left bit means next status which is dead, right bit means cur status which is live
    //00=>cur dead to next dead; 01=>cur live to next dead
    //10=>cur dead to next live; 11=>cur live to next live
    vector<int> dx = {1, -1, 0, 0, -1, -1, 1, 1};
    vector<int> dy = {0, 0, 1, -1, -1, 1, -1, 1};
    void gameOfLife(vector<vector<int>>& board) {
        
        if(board.empty() || board.at(0).empty()) return;
        
        int n = board.size();
        int m = board.at(0).size();
        
        for(int i = 0; i< n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                //check cur status
                int cur = (board[i][j] & 0b01);
                int next = 0;
                //count neighbor status
                int neighbor_lives = 0;
                for(int k = 0; k < 8; k++)
                {
                    int nx = i+dx[k];
                    int ny = j+dy[k];
                    if(nx < 0 || nx >= n || ny <0 || ny >=m) continue;
                    if((board[nx][ny]&0b01) == 1)
                    {
                        
                        neighbor_lives++;
                    }
                }
 
                //live->live
                if(cur == 1 && (neighbor_lives ==2 || neighbor_lives==3) )
                {
                    next = 3;
                }
                else if(cur == 0 && neighbor_lives == 3) //die->live
                {
                    next = 2;
                }
                else if(cur == 1)
                {
                    next = 1;
                }

                board[i][j] = next;
                
            }
        }
        
        for(int i = 0; i <n; i++)
        {
            for(int j = 0; j<m; j++)
            {
                board[i][j] = ((board[i][j] >> 1)&1);
            }
        }
        
    }
};
