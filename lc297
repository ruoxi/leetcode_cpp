297. Serialize and Deserialize Binary Tree   QuestionEditorial Solution  My Submissions
Total Accepted: 38663
Total Submissions: 125310
Difficulty: Hard
Contributors: Admin
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

Credits:
Special thanks to @Louis1992 for adding this problem and creating all test cases.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        ostringstream oss;
        serializehelper(root, oss);
        return oss.str();
    }

    void serializehelper(TreeNode* root, ostringstream& oss)
    {
        if(root == NULL) 
        {
            oss << "# ";
            return;
        }
        
        oss << root->val << " ";
        serializehelper(root->left, oss);
        serializehelper(root->right, oss);
        
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringstream iss(data);
        return deserializehelper(iss);
    }
    
    TreeNode* deserializehelper(istringstream& iss)
    {
        string str;
        iss >> str;
        
        if(str == "#")
        {
            return NULL;
        }
        else
        {
            int value = stoi(str);
            TreeNode* cur = new TreeNode(value);
            cur->left = deserializehelper(iss);
            cur->right = deserializehelper(iss);
            return cur;
        }
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
