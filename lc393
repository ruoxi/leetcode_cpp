393. UTF-8 Validation   QuestionEditorial Solution  My Submissions
Total Accepted: 5464
Total Submissions: 15614
Difficulty: Medium
Contributors: Admin
A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

For 1-byte character, the first bit is a 0, followed by its unicode code.
For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.
This is how the UTF-8 encoding would work:

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
Given an array of integers representing the data, return whether it is a valid utf-8 encoding.

Note:
The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

Example 1:

data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.

Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
Example 2:

data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.

Return false.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.


class Solution {
public:
    //思路：第一个数，看最高位开始有多少个连续的1,知道碰到第一个0。1的个数表示utf8里有多少个数(包含当前的)， eg k
    //检查之后的k-1个数要以10开头
    //如果以0开头表示只有当前这一个数
    int getNumberofBytes(int num)
    {
        //返回的是还有多少个following number
        int cnt = 0;
        int mask = (1 << (7-cnt));
        
        while((mask & num) != 0)
        {
            cnt++;
            mask = (1 << (7-cnt));
        }
        
        //this means we have 10000000 which is invalid
        if(cnt == 1) return -1;
        if(cnt == 0) return cnt;
        return cnt-1;
        //1111 1000 is not valid
        
    }
    
    bool validUtf8(vector<int>& data) {
        if(data.empty()) return true;
        
        int n = data.size();
        int cnt = 0;
        
        for(int i = 0; i < n; i++)
        {
            //means this is a new start of sequence
            //check how many words
            int cur = data[i];
            //cout << "cur=" << cur << " cnt=" << cnt << endl;
            if(cnt == 0)
            {
                cnt = getNumberofBytes(cur);
                //cout << "cnt=" << cnt << " num=" << cur << endl;
                if(cnt == -1) return false;

                if(n-1-i < cnt)
                {
                    return false;
                }
            }
            else
            {
                //check if it starts with 10
                if((cur&0b11000000) != 0b10000000)
                {
                    return false;
                }
                cnt--;
            }
        }
        
        return cnt == 0;
        
        
    }
};
