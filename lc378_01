378. Kth Smallest Element in a Sorted Matrix   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 22946
Total Submissions: 53332
Difficulty: Medium
Contributors: Admin
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
Note: 
You may assume k is always valid, 1 ≤ k ≤ n2.



class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        //binary search in range
        
        if(matrix.empty() || matrix.at(0).empty()) return 0;
        
        int n = matrix.size();
        int m = matrix.at(0).size();
        
        int low = matrix[0][0], high = matrix[n-1][m-1];
        
        while(low + 1 < high)
        {
            int mid = low + (high - low)/2;
            
            //count number >= mid
            int count = count_smaller(matrix, mid);
            
            if(count < k) low = mid;
            else
            {
                high = mid;
            }
        }
        
        if(count_smaller(matrix, low) >= k) return low;
        else return high;
    }
    
    
    int count_smaller(vector<vector<int>>& matrix, int value)
    {
        int n = matrix.size();
        int m = matrix.at(0).size();
        int count = 0;
        
        
        for(int i = 0; i < n; i++)
        {
            int pos = upper_bound(matrix, i, value);
            
            //all elements in row is smaller or equal to value
            if(pos == -1)
            {
                count += m;
            }
            else
            {
                count += pos;
            }

        }
        
        return count;
    }
    
    //find the first one larger than value
    int upper_bound(vector<vector<int>>& matrix, int row, int value)
    {
        int n = matrix.size();
        int m = matrix.at(0).size();
        int left = 0;
        int right = m-1;
        
        while(left +1 < right)
        {
            int mid = left + (right - left)/2;
            
            if(matrix[row][mid] <= value)
            {
                left = mid;
            }
            else
            {
                right = mid;
            }
            
        }
        
        if(matrix[row][left] > value) return left;
        if(matrix[row][right] > value) return right;
        return -1;
    }
};
