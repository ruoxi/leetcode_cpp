323. Number of Connected Components in an Undirected Graph   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 19189
Total Submissions: 41222
Difficulty: Medium
Contributors: Admin
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

//Topological sort BFS for undirected graph
//use visited数组

class Solution {
public:
    //use topological sort
    int countComponents(int n, vector<pair<int, int>>& edges) {
        if(edges.empty()) return n;
        
        vector<vector<int>> graph(n, vector<int>());
        
        int m = edges.size();
        for(int i = 0; i < m ; i++)
        {
            graph[edges[i].first].push_back(edges[i].second);
            graph[edges[i].second].push_back(edges[i].first);
        }
        
        
        vector<bool> visited(n, false);
        int cnt = 0;
        for(int i = 0; i < n; i++)
        {
            if(visited[i]) continue;
            cnt++;
            //bfs
            queue<int> q;
            q.push(i);
            visited[i] = true;
            while(!q.empty())
            {
                int cur = q.front(); q.pop();
                
                for(auto next: graph[cur])
                {
                    if(!visited[next])
                    {
                        q.push(next);
                        visited[next] = true;
                    }
                }
            }
        }
        
        return cnt;
        
    }
};
