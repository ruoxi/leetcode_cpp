44. Wildcard Matching   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 77396
Total Submissions: 411184
Difficulty: Hard
Contributors: Admin
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

//Runtime: O(NM)
//Space: O(m)

class Solution {
public:
    //state: dp[i][j] 表示s[0...i-1]能否match p[0...j-1]
    //function: dp[i][j] = dp[i-1][j-1] if(s[i-1] == p[j-1])
    //                   = dp[i-1][j-1] if(p[j-1] == '?')
    //                   = dp[i-1][j] || dp[i][j-1] if(p[j-1] == *)
    //initialization: dp[0][0] = true; dp[0][i] = dp[0][i-1] if(p[i-1] == *) 
    //Note:这道题*可以match任何字母：s=axb p= a*b => true; s=aab, p=a* => true; s=ab, p=a*b => true
    bool isMatch(string s, string p) {
        if(s.empty() && p.empty()) return true;
        
        int n = s.length();
        int m = p.length();
        
        vector<vector<bool>> dp(2, vector<bool>(m+1, false));
        dp[0][0] = true;
        
        for(int i = 1; i <= m; i++)
        {
            dp[0][i] = dp[0][i-1] && p[i-1] == '*';
        }
        
        for(int i = 1; i <= n; i++)
        {
            dp[i%2][0] = false;
            for(int j = 1; j <=m; j++)
            {
                if(p[j-1] != '*')
                {
                    dp[i%2][j] = dp[(i-1)%2][j-1] && (p[j-1] == '?' || p[j-1] == s[i-1]);
                }
                else
                {
                    dp[i%2][j] = dp[(i-1)%2][j] || dp[i%2][j-1];
                }
            }
        }
        return dp[n%2][m];
    }
};
