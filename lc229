229. Majority Element II   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 47042
Total Submissions: 168678
Difficulty: Medium
Contributors: Admin
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.

Hint:

How many majority elements could it possibly have?
Do you have a better hint? Suggest it!
Show Company Tags
Show Tags
Show Similar Problems
https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        
        int cand1 = 0, cand2=1, cnt1=0, cnt2=0;
        
        for(int i = 0; i < n; i++)
        {
            if(nums[i] == cand1)
            {
                cnt1++;
            }
            else if(nums[i] == cand2)
            {
                cnt2++;
            }
            else if(cnt1 == 0)
            {
                cand1 = nums[i];
                cnt1++;
            }
            else if(cnt2 == 0)
            {
                cand2 = nums[i];
                cnt2++;
            }
            else
            {
                cnt1--;
                cnt2--;
            }
        }
        
        //verify it 
        cnt1 = 0, cnt2 = 0;
        for(int i = 0; i < n; i++)
        {
            if(nums[i] == cand1) cnt1++;
            else if(nums[i] == cand2) cnt2++;
        }
        
        vector<int> res;
        if(cnt1 > n/3)
        {
            res.push_back(cand1);
        }
        
        if(cnt2 > n/3)
        {
            res.push_back(cand2);
        }
        
        return res;
    }
};
