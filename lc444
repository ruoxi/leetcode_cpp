444. Sequence Reconstruction   QuestionEditorial Solution  My Submissions
Total Accepted: 810
Total Submissions: 4179
Difficulty: Medium
Contributors: Stomach_ache
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

Example 1:

Input:
org: [1,2,3], seqs: [[1,2],[1,3]]

Output:
false

Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
Example 2:

Input:
org: [1,2,3], seqs: [[1,2]]

Output:
false

Explanation:
The reconstructed sequence can only be [1,2].
Example 3:

Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

Output:
true

Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
Example 4:

Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

Output:
true

class Solution {
public:
    //construct a directional graph based on seqs
    //do topological sort to check if it is the same is org, 
    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {
        
        unordered_map<int, vector<int>> graph;
        

        unordered_map<int, int> indegree;
        
        for(int i = 0; i < seqs.size(); i++)
        {
            if(seqs[i].empty()) continue;
            
            int first = seqs[i][0];
            if(indegree.find(first) == indegree.end())
            {
                indegree[first] = 0;
            }
            for(int j = 1; j < seqs[i].size(); j++)
            {
                int first = seqs[i][j-1];
                int second = seqs[i][j];
                indegree[second]++;
                //cout << "push second=" << second << endl;
                graph[first].push_back(second);
            }
        }
        

        //find the start point
        queue<int> q;
        
        for(auto in : indegree)
        {
            if(in.second == 0)
            {
                //cout << "push to q " << in.first << endl;
                q.push(in.first);
            }
        }
        
        //topological sort
        int n_nodes = 0;
        int idx = 0;
        while(!q.empty())
        {
            if(q.size() > 1) return false;
            int cur = q.front(); q.pop();
            
            n_nodes++;
            //cout << "cur=" << cur << " idx=" << idx << " n_nodes=" << n_nodes << " org[idx]=" << org[idx] << endl;
            if(cur != org[idx]) return false;
            idx++;
            
            //check neighbor
            vector<int> neighbor = graph[cur];
            
            for(int i = 0; i < neighbor.size(); i++)
            {
                
                indegree[neighbor[i]]--;
                if(indegree[neighbor[i]] == 0)
                {
                    q.push(neighbor[i]);
                }
            }
            
        }
        
        //Note indegree.size() == n_nodes is to check if seqs contains of two unconnected component
        //but org only have one of them
        return n_nodes == org.size() && indegree.size() == n_nodes;
    }
};
