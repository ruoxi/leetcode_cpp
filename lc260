/*
260. Single Number III   QuestionEditorial Solution  My Submissions
Total Accepted: 51413
Total Submissions: 106902
Difficulty: Medium
Contributors: Admin
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?
*/


class Solution {
public:
    //思路：把所有的num都xor，然后结果就是2个unique number xor的结果，取其中的是1的bit
    //可以把nums里面所有的数字都分成两组，一组是这个bit是1，另一组是0
    vector<int> singleNumber(vector<int>& nums) {
        if(nums.empty()) return vector<int>();
        
        int diff = 0;
        int n = nums.size();
        
        for(int i = 0; i < n; i++)
        {
            diff ^= nums[i];
        }
        
        diff &= ~(diff - 1);// or diff&= -diff 找到最后一个set bit
        //diff &= -diff;
        
        vector<int> res = {0, 0};
        
        for(int i = 0; i < n; i++)
        {
            if((nums[i] & diff) == 0)
            {
                res[0] ^= nums[i];
            }
            else
            {
                res[1] ^= nums[i];
            }
        }
        
        return res;
        
        
    }
};
