259. 3Sum Smaller   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 19505
Total Submissions: 48043
Difficulty: Medium
Contributors: Admin
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?

Show Company Tags
Show Tags
Show Similar Problems


class Solution {
public:
    int threeSumSmaller(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        
        sort(nums.begin(), nums.end());
        int n = nums.size();
        
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            int left = i+1, right = n-1;
            
            while(left < right)
            {
                int sum = nums[i] + nums[left] + nums[right];
                if(sum < target)
                {
                    //all the nums[i] + nums[left] + nums[j] where h < left < right will be < target
                    res += right - left;
                    left++;
                }
                else if(sum >= target)
                {
                    right--;
                }
                
            }
        }
        
        return res;
    }
};
