393. UTF-8 Validation   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 9147
Total Submissions: 25577
Difficulty: Medium
Contributors: Admin
A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

For 1-byte character, the first bit is a 0, followed by its unicode code.
For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.
This is how the UTF-8 encoding would work:

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
Given an array of integers representing the data, return whether it is a valid utf-8 encoding.

Note:
The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

Example 1:

data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.

Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
Example 2:

data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.

Return false.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.

//这里注意的是要仔细观察题目中的条件，utf最多4个byte就是说数字中最多前四位是1第五位是0
//所以只需要check3次就知道长度， 如果超过这个长度只需要看第一位，如果第一位是1的话就是invalid

//同时要注意在return时候要check count是否是0，有可能出现一个数字有3个folowing data,但是array里只有2个就结束了
class Solution {
public:
    bool validUtf8(vector<int>& data) {
        
        if(data.empty()) return true;
        
        
        int n = data.size();
        int count = 0;
        for(int i = 0; i < n; i++)
        {
            int cur = data[i];
            if(count == 0)
            {
                //check the count
                if((cur>>5) == 0b110) count = 1;
                else if((cur>>4) == 0b1110) count = 2;
                else if((cur>>3) == 0b11110) count = 3;
                else if((cur>>7) == 1) return false;
            }
            else
            {
                //check if start with 10
                if((cur>>6) != 0b10) return false;
                
                count--;
            }
        }

        return count == 0;
    }
    
   
};
