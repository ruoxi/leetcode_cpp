296. Best Meeting Point   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 9939
Total Submissions: 19732
Difficulty: Hard
Contributors: Admin
A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

For example, given three people living at (0,0), (0,4), and (2,2):

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (0,2) is an ideal meeting point, as the total travel distance of 2+2+2=6 is minimal. So return 6.

Hint:

Try to solve it in one dimension first. How can this solution apply to the two dimension case?


class Solution {
public:

    //思路是把2D拆成1D分开看
    //1D 的时候给了一堆position, 找出一个点能使得这个点到其他所有点的和最小，这个点一定是median
    //prove: 假设有3个点上有房子，{1， 3， 4}
    //如果meeting point 在1上，那么它右边还有2个点， 总距离是5，
    //当把meeting point 向右移1，比如说在x=2上，那么就离{3，4}每个都近了距离1， 离1远了距离1，总距离和减少了1（因为右边房子比左边房子远）
    //当把meeting point 向右移2，x=3,离{3，4}每个近了2，离1远了2，总距离和减少2*2-2 = 2
    //如果向右移3，x=4,那么离{4}近了3， 离{3}远了1， 离{1}远了3， 总距离近了3-3-1 = -1
    //所以x=3是最优解，
    //结论是：给一堆数S 求(S[i]-x)的和最小,那么x是S的median
    http://math.stackexchange.com/questions/113270/the-median-minimizes-the-sum-of-absolute-deviations
    int minTotalDistance(vector<vector<int>>& grid) {
        if(grid.empty() || grid.at(0).empty()) return 0;
        
        int n = grid.size();
        int m = grid.at(0).size();
        
        vector<int> xaxis;
        vector<int> yaxis;
        
        for(int i = 0; i <n; i++)
        {
            for(int j = 0; j< m; j++)
            {
                if(grid[i][j] == 1)
                {
                    xaxis.push_back(i);
                    yaxis.push_back(j);
                }
            }
        }
        
        return getMinDistance(xaxis) + getMinDistance(yaxis);
    }
    
    int getMinDistance(vector<int>& nums)
    {
        sort(nums.begin(), nums.end());
        int start = 0, end = nums.size()-1;
        int res=0;
        while(start < end)
        {
            res += nums[end] - nums[start];
            end--;
            start++;
        }
        
        return res;
    }
};
