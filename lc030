30. Substring with Concatenation of All Words   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 70131
Total Submissions: 323864
Difficulty: Hard
Contributors: Admin
You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).


class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        
        if(s.empty() || words.empty()) return vector<int>();
        
        int n = s.length();
        int m = words.size();
        
        unordered_map<string, int> dict;
    
        for(int i = 0; i < m; i++)
        {
            dict[words[i]]++;
        }
   
        int wordlen = words[0].length();
        
        vector<int> res;
        
        //possible starting position
        for(int i = 0; i < wordlen; i++)
        {
            int left = i;int nwords = m;
            unordered_map<string, int> tdict;
            for(int j = i; j <= n-wordlen; j+= wordlen)
            {
                string sub = s.substr(j, wordlen);
                
                if(dict.find(sub) != dict.end())
                {
                    tdict[sub]++;
                    if(tdict[sub] <= dict[sub])
                    {
                        nwords--;
                    }
                    else
                    {
                        //need to shrink the left side of while
                        while(tdict[sub] > dict[sub])
                        {
                            string t = s.substr(left, wordlen);
                            tdict[t]--;
                            if(tdict[t] < dict[t]) nwords++;
                            left+=wordlen;
                        }
                    }
                    
                    //come to a valid result
                    if(nwords == 0)
                    {
                        res.push_back(left);
                        //advanced one word
                        string t = s.substr(left, wordlen);
                        tdict[t]--;
                        nwords++;
                        left += wordlen;
                    }
                }
                else
                {
                    //this is not valid, reset the values
                    nwords = m;
                    tdict.clear();
                    left = j+wordlen;
                    
                }
            }
        }
        return res;
    }
};
