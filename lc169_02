169. Majority Element   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 168624
Total Submissions: 375022
Difficulty: Easy
Contributors: Admin
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

Show Company Tags
Hide Tags


class Solution {
public:
    //use quick select, majority element will be the n/2th largest num
    int majorityElement(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int n =nums.size();
        
        int start = 0, end = n-1;
        int k = (n+1)/2;
        
        while(start <= end)
        {
            int pos = partition(nums, start, end);
            if(pos == k-1) return nums[pos];
            else if(pos > k-1)
            {
                end = pos-1;
            }
            else
            {
                start = pos+1;
            }
        }
        
        
        
        
        return -1;
    }
    
    
    int partition(vector<int>& nums, int start, int end)
    {
        int left = start, right = end;
        
        int pivot = nums[left];
        while(left < right)
        {
            while(left < right && nums[right] < pivot)
            {
                right--;
            }
            nums[left] = nums[right];
            
            while(left < right && nums[left] >= pivot)
            {
                left++;
            }
            
            nums[right] = nums[left];
        }
        
        nums[left] = pivot;
        return left;
    }
};
