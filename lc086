86. Partition List   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 85891
Total Submissions: 272837
Difficulty: Medium
Contributors: Admin
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.


class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head == NULL || head->next == NULL) return head;
        
        ListNode dummyfirst(-1);
        ListNode dummysecond(-1);
        
        ListNode* prev1 = &dummyfirst;
        ListNode* prev2 = &dummysecond;
        
        ListNode* cur = head;
        while(cur != NULL)
        {
            if(cur->val < x)
            {
                prev1->next = cur;
                prev1 = prev1->next;
            }
            else
            {
                prev2->next = cur;
                prev2 = prev2->next;
            }
            cur = cur->next;
        }
        
        prev2->next = NULL;
        prev1->next = dummysecond.next;
        
        return dummyfirst.next;
    }
};
