306. Additive Number   QuestionEditorial Solution  My Submissions
Total Accepted: 18057
Total Submissions: 67018
Difficulty: Medium
Contributors: Admin
Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

For example:
"112358" is an additive number because the digits can form an additive sequence: 1, 1, 2, 3, 5, 8.

1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
"199100199" is also an additive number, the additive sequence is: 1, 99, 100, 199.
1 + 99 = 100, 99 + 100 = 199
Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Follow up:
How would you handle overflow for very large input integers?

Credits:
Special thanks to @jeantimex for adding this problem and creating all test cases.

//思路：选最开始的两个数，prev, cur，然后看剩下的string能否组成prev+cur
//注意handle leading zeros.

class Solution {
public:

    string add(string& prev, string& cur)
    {
        string res= "";
        int n = prev.length(), m = cur.length();
        
        int carry = 0;
        for(int i = n-1, j = m-1; i>=0 || j>=0; i--, j--)
        {
            int sum = carry;
            if(i >=0 ) sum += prev[i]-'0';
            if(j >=0 ) sum += cur[j]-'0';
            
            carry = sum/10;
            sum = sum%10;
            res = to_string(sum) + res;
        }
        
        if(carry>0)
        {
            res = to_string(carry) + res;
        }
        
        return res;
    }
    
    bool dfs(string prev, string cur, string rest)
    {
        if(prev.size() > 1 && prev[0] == '0' || cur.size()>1 && cur[0] == '0') return false;
        
        string sum = add(prev, cur);
        if(sum == rest) return true;
        if(sum.size() >= rest.size() || rest.substr(0, sum.size()) != sum) return false;
        
        return dfs(cur, sum, rest.substr(sum.size()));
    }
    
    bool isAdditiveNumber(string num) {
        int n = num.size();
        for(int i = 1; i <=n/2; i++)
        {
            for(int j = 1; j <=(n-i)/2 ;j++)
            {
                if(dfs(num.substr(0,i), num.substr(i, j), num.substr(i+j)))
                {
                    return true;
                }
            }
        }
        
        return false;
    }
};
