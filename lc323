323. Number of Connected Components in an Undirected Graph   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 18678
Total Submissions: 40274
Difficulty: Medium
Contributors: Admin
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


//Union find
//Runtime: O(max(m,n))
//Space: O(n)

class Solution {
public:

    int find(vector<int>& father, int a)
    {
        int pa = father[a];
        
        while(pa != father[pa])
        {
            pa = father[pa];
        }
        
        int root = pa;
        pa = a;
        while(pa != father[pa])
        {
            int tmp = father[pa];
            father[pa] = root;
            pa = tmp;
        }
        
        return root;
    }
    
    int countComponents(int n, vector<pair<int, int>>& edges) {
        
        if(edges.empty()) return n;
        
        vector<int> father(n, 0);
        
        //一开始所有都指向自己
        for(int i = 0; i < n; i++)
        {
            father[i] = i;
        }
        
        int m = edges.size();
        int res = n;
        for(int i = 0; i <m; i++)
        {
            int roota = find(father, edges[i].first);
            int rootb = find(father, edges[i].second);
            if(roota != rootb)
            {
                res--;
                father[roota] = rootb;
            }
        }
        
        return res;
        
    }
};
