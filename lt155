155. Min Stack   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 109017
Total Submissions: 412147
Difficulty: Easy
Contributors: Admin
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        data.push(x);
        
        if(minStk.empty() || x <= minStk.top())
        {
            minStk.push(x);
        }
    }
    
    void pop() {
        if(data.empty()) return;
        int res = data.top(); data.pop();
        
        if(res == minStk.top())
        {
            minStk.pop();
        }
        
    }
    
    int top() {
        return data.top();
    }
    
    int getMin() {
        
        return minStk.top();
    }
    
    stack<int> data;
    stack<int> minStk;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
