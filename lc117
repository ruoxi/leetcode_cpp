117. Populating Next Right Pointers in Each Node II   QuestionEditorial Solution  My Submissions
Total Accepted: 77087
Total Submissions: 231423
Difficulty: Hard
Contributors: Admin
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return;
        if(root->left == NULL && root->right == NULL) return;
        
        TreeLinkNode* cur = root;
        TreeLinkNode* nexthead = NULL;
        TreeLinkNode* next = NULL;
        
        while(cur != NULL)
        {

            //find cur head
            while(cur != NULL)
            {
                if(cur->left != NULL )
                {
                    if(next != NULL)
                    {
                        next->next = cur->left;
                    }
                    else
                    {
                        nexthead = cur->left;
                    }
                    
                    next = cur->left;
 
                }
                
                if(cur->right != NULL)
                {
                    if(next != NULL)
                    {
                        next->next = cur->right;
                    }
                    else
                    {
                        nexthead = cur->right;
                    }
                    
                    next = cur->right;
                }
                
                cur = cur->next;
 
            }
            
            cur = nexthead;
            nexthead =NULL;
            next = NULL;
            
        }
    }
};
