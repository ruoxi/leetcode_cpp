19. Remove Nth Node From End of List   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 151400
Total Submissions: 472196
Difficulty: Easy
Contributors: Admin
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

Show Tags



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL || n== 0) return head;
        
        //find the n-1th node from the end
        ListNode dummy(-1);
        dummy.next = head;
        
        ListNode* fast = &dummy;
        
        for(int i = 0; i < n && fast != NULL; i++)
        {
            fast = fast->next;
        }
        
        if(fast == NULL) return head;
        
        ListNode* slow = &dummy;
        
        while(fast != NULL && fast->next != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        
        //now slow points to n-1th node
        ListNode* remove = slow->next;
        slow->next = remove->next;
        delete(remove);
        
        return dummy.next;
     }
};
