/*
414. Third Maximum Number   QuestionEditorial Solution  My Submissions
Total Accepted: 4157
Total Submissions: 15850
Difficulty: Easy
Contributors: ZengRed , 1337c0d3r
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
*/

//Runtime: O(n)
//Space: O(1)

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int n = nums.size();
        int* firstMax = NULL;
        int* secondMax = NULL;
        int* thirdMax = NULL;
        
        for(int i = 0; i < n; i++)
        {
            
            if(firstMax != NULL && *firstMax == nums[i]) continue;
            if(secondMax != NULL && *secondMax == nums[i]) continue;
            if(thirdMax != NULL && *thirdMax == nums[i]) continue;
            
            if(firstMax == NULL || *firstMax < nums[i])
            {
                thirdMax = secondMax;
                secondMax = firstMax;
                firstMax = &nums[i];
            }
            else if(secondMax == NULL || *secondMax < nums[i])
            {
                thirdMax = secondMax;
                secondMax = &nums[i];
            }
            else if(thirdMax == NULL || *thirdMax < nums[i])
            {
                thirdMax = &nums[i];
            }
        }
        
        if(thirdMax == NULL) return *firstMax;
        return *thirdMax;
        
        
    }

};
