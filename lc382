/*
382. Linked List Random Node   QuestionEditorial Solution  My Submissions
Total Accepted: 13375
Total Submissions: 29310
Difficulty: Medium
Contributors: Admin
Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();
*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
//Reservoir sampling 这里k=1
//举例：如果data是一个数， 1， 那么返回他的概率就是1/1
//如果data是2个数，1，2，之前res = 1，怎么确定要不要改成2?在0，1里random里选一个index,如果这个index==1那么就把res update成2
class Solution {
public:
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        mhead = head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        
        int res = mhead->val;
        
        int cur = mhead;
        for(int i = 1; cur != NULL ; i++)
        {
            //在0...i-1中random 取一个数
            if(rand()%i == 0)
            {
                res = cur->val;
            }
            
            cur = cur->next;
        }
        
        return res;
    }
    
    ListNode* mhead;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
