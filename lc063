63. Unique Paths II   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 85811
Total Submissions: 279136
Difficulty: Medium
Contributors: Admin
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.

//Runtime: O(m*n)
//Space: O(m)

class Solution {
public:
    //state: dp[i][j]表示在(i,j)点的# of paths
    //function: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) if obstacleGrid[i][j] != 1
    //                   = 0 if obstacleGrid[i][j] == 1
    //initialization: dp[i][0] = 1 if obstacleGrid[i][0] != 1 dp[0][i] = 1 if obstacleGrid[0][i] !=1
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty() || obstacleGrid.at(0).empty()) return 0;
        
        if(obstacleGrid[0][0] == 1) return 0;
        
        int n = obstacleGrid.size();
        int m = obstacleGrid.at(0).size();
        
        vector<vector<int>> dp(2, vector<int>(m, 0));
        
        dp[0][0] = 1;
        
        for(int i = 1; i <m; i++)
        {
            if(obstacleGrid[0][i] == 1) break;
            dp[0][i] = 1;
        }
        
        for(int i = 1; i <n; i++)
        {
            if(obstacleGrid[i][0] == 0)
            {
                dp[i%2][0] = dp[(i-1)%2][0];
            }
            else
            {
                dp[i%2][0] = 0;
            }
            for(int j = 1; j < m; j++)
            {
                if(obstacleGrid[i][j] != 1)
                {
                    dp[i%2][j] = dp[(i-1)%2][j] + dp[i%2][j-1];
                }
                else
                {
                    dp[i%2][j] = 0;
                }
            }
        }
        
        return dp[(n-1)%2][m-1];
        
    }
};
