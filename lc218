218. The Skyline Problem   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 31738
Total Submissions: 124971
Difficulty: Hard
Contributors: Admin
A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).

The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX, and Ri - Li > 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .

The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.

For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].

Notes:

The number of buildings in any input list is guaranteed to be in the range [0, 10000].
The input list is already sorted in ascending order by the left x position Li.
The output list must be sorted by the x position.
There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...[2 3], [4 5], [12 7], ...]
Credits:
Special thanks to @stellari for adding this problem, creating these two awesome images and all test cases.


//sweep line + heap
//这里需要注意的是points的comparator, 当两个点的x坐标相等时，需要分情况讨论
//如果都是start, 那么需要让height最大的排在前面，这样之后算结果时，就不需要修改res.back().first
//如果都是end,那么需要让height最小的排在前面，当height小的先从maxheap中删去时，maxheap.top()没有改变，就不需要修改res.back().first
//否则上面两种情况都需要跟res的最后一个element比较是否first相同，如果相同的话，需要修改res.back().second使高度不停update
//如果一个是start, 一个是end, 那么需要让start在前，否则会加入错误结果

class Solution {
public:

    class Point
    {
    public:
        int x;
        int h;
        bool start;
        Point(int xx, int hh, bool s)
        :x(xx),h(hh),start(s) {}
    };
    
    class Comparator
    {
    public:
        bool operator()(const Point& a, const Point& b)
        {
            if(a.x != b.x) return a.x < b.x;
            
            if(a.start && b.start)
            {
                return a.h > b.h;
            }
            
            if(!a.start && !b.start)
            {
                return a.h < b.h;
            }
            
            return a.start;
        }
    };
    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
        
        if(buildings.empty() || buildings.at(0).empty()) return vector<pair<int, int>>();
        
        int n = buildings.size();
        //separate the building dimensions to points
        vector<Point> points;
        for(int i = 0; i <n; i++)
        {
            points.push_back(Point(buildings[i][0], buildings[i][2], true));
            points.push_back(Point(buildings[i][1], buildings[i][2], false));
        }
        
        sort(points.begin(), points.end(), Comparator());
        multiset<int, greater<int>> maxheap; 
        vector<pair<int, int>> res;
        
        for(int i = 0; i < 2*n; i++)
        {
            Point cur = points[i];
            

            if(cur.start)
            {
                //check if need to add to res
                if(maxheap.empty() || !maxheap.empty() && (*maxheap.begin()) < cur.h)
                {
                    res.push_back(make_pair(cur.x, cur.h));
                }
                maxheap.insert(cur.h);
            }
            else
            {
                //need to remove it from maxheap
                multiset<int, greater<int>>::iterator it = maxheap.find(cur.h);
                maxheap.erase(it);
                
                //check if need to add to res
                if(!maxheap.empty() && (*maxheap.begin()) < cur.h)
                {
                    res.push_back(make_pair(cur.x, (*maxheap.begin())));
                }
                
                if(maxheap.empty())
                {
                    res.push_back(make_pair(cur.x, 0));
                }
            }

        }
        
        return res;
        
        
        
    }
};
