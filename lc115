115. Distinct Subsequences   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 62262
Total Submissions: 204190
Difficulty: Hard
Contributors: Admin
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.

//Runtime: O(nm)
//Space: O(m)

class Solution {
public:
    //state: dp[i][j]表示s[0...i-1]里有多少个t[0...j-1]
    //function: dp[i][j] = dp[i-1][j-1] + dp[i-1][j] if(s[i-1] == t[j-1])
    //                   = dp[i-1][j] if(s[i-1] != t[j-1])
    //initialization: dp[0][0] = 1, dp[i][0] = 1, dp[0][i] = 0
    int numDistinct(string s, string t) {

        if(t.empty()) return 1;
        if(s.empty()) return 0;
        
        int n = s.length();
        int m = t.length();
        
        vector<vector<int>> dp(2, vector<int>(m+1, 0));
        
        dp[0][0] = 1;

        for(int i = 1; i <=n; i++)
        {
            dp[i%2][0] = 1;
            for(int j = 1; j <=m; j++)
            {
                if(s[i-1] == t[j-1])
                {
                    dp[i%2][j] = dp[(i-1)%2][j-1] + dp[(i-1)%2][j];
                }
                else
                {
                    dp[i%2][j] = dp[(i-1)%2][j];
                }
            }
        }
        
        return dp[n%2][m];        
    }
};
