//216. Combination Sum III

//Find all possible combinations of k numbers that add up to a number n, 
//given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

//Example 1:
//Input: k = 3, n = 7
//Output:
//[[1,2,4]]
//Example 2:
//Input: k = 3, n = 9
//Output:
//[[1,2,6], [1,3,5], [2,3,4]]


class Solution {
public:

    void dfs(int k, int n, vector<int>& sol, vector<vector<int>>& res, int start)
    {
        if(sol.size() == k && n==0)
        {
            res.push_back(sol);
            return;
        }
        
        for(int i = start; i <= 9 && i <= n; i++)
        {
            sol.push_back(i);

            dfs(k, n-i, sol, res,i+1);

            sol.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        if(k == 0 || n ==0) return vector<vector<int>>();
        
        vector<int> sol;
        vector<vector<int>> res;

        dfs(k, n, sol, res,1);
        
        return res;
    }
};
