98. Validate Binary Search Tree   QuestionEditorial Solution  My Submissions
Total Accepted: 125628
Total Submissions: 569073
Difficulty: Medium
Contributors: Admin
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //inorder traversal to check prev->val < cur->val
 //Note use of TreeNode*& 
class Solution {
public:


    
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;   
        TreeNode* prev = NULL;
        return helper(root, prev);

    }
    
    bool helper(TreeNode* root, TreeNode*& prev)
    {
        if(root == NULL) return true;
        if(!helper(root->left, prev)) return false;
        
        if(prev != NULL && prev->val >= root->val) return false;
        
        prev = root;
        
        return helper(root->right, prev);
    }
};
