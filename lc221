221. Maximal Square   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 46608
Total Submissions: 174860
Difficulty: Medium
Contributors: Admin
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.

//Runtime: O(n*m)
//Space: O(m)

class Solution {
public:
    //坐标型？
    //state: dp[i][j]表示以(i,j)点为右下角的square 边长
    //function: dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) +1 if matrix[i][j] == 1
    //initialization: dp[i][0]= 1 if matrix[i][0] == 1, dp[0][i] = 1 if matrix[0][i] == 1
    int maximalSquare(vector<vector<char>>& matrix) {
        
        if(matrix.empty() || matrix.at(0).empty()) return 0;
        
        int n = matrix.size();
        int m = matrix.at(0).size();
   
        vector<vector<int>> dp(2, vector<int>(m, 0));
        
        int res = 0;
        /*for(int i = 0; i < n; i++)
        {
            dp[i][0] = matrix[i][0] == '1';
            res = max(res, dp[i][0]);
        }*/
        
        for(int j = 0; j < m; j++)
        {
            dp[0][j] = matrix[0][j] == '1';
            res = max(res, dp[0][j]);
        }
        

        for(int i = 1; i <n; i++)
        {
            dp[i%2][0] = matrix[i][0] == '1';
            res = max(res, dp[i%2][0]);
            for(int j = 1; j < m; j++)
            {
                if(matrix[i][j] == '1')
                {
                    dp[i%2][j] = min(dp[(i-1)%2][j-1], min(dp[(i-1)%2][j],dp[i%2][j-1]) )+1;
                    
                }
                else
                {
                    //Note:滚动数组优化时，一定要注意reset value
                    dp[i%2][j] = 0;
                }
                
                res = max(res, dp[i%2][j]);
            }
        }
        
        return res*res;
        
        
        
    }
};
