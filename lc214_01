/*214. Shortest Palindrome   QuestionEditorial Solution  My Submissions
Total Accepted: 28242
Total Submissions: 128367
Difficulty: Hard
Contributors: Admin
Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

For example:

Given "aacecaaa", return "aaacecaaa".

Given "abcd", return "dcbabcd".
*/

//Runtime: O(n)
//Space: O(n)

class Solution {
public:
    //kmp
    //eg. s = babcd
    //eg. first reverse s and append reversed string to s=>s+#+rev_s
    //然后可以看这个新形成的string中公共最长前缀后缀是什么，这里用到kmp算法 O(n)
    //需要append到s前面的substr就是rev_s中去掉最长公共后缀的部分
    // babcd#dcbab -->最长公共前缀后缀是bab, 那么只需要把dc+babcd就是最短回文
    string shortestPalindrome(string s) {
        //KMP
        string rev_s = s;
        reverse(rev_s.begin(), rev_s.end());
        
        string t = s + "#" + rev_s;
        
        int n = t.size();
        //next[j]=k表示t[0...j]中t[0...k-1]和t[j-k+1, j]完全相同，是公共前缀后缀
        vector<int> next(n, 0);
        
        for(int i = 1; i < n; i++)
        {
            int j = next[i-1];
            //如果t[j] != t[i], 则不停回溯直到j == 0或者t[j] == t[i]
            while(j > 0 && t[j] != t[i])
            {
                j = next[j-1];
            }
            
            next[i] = j+(t[i] == t[j]);
        }
        
        int maxlen = next[n-1];
        string res = rev_s.substr(0, s.length()-maxlen) + s;
        return res;
        
        
    }
};
