72. Edit Distance   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 74401
Total Submissions: 244714
Difficulty: Hard
Contributors: Admin
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

//Runtime: O(nm)
//Space: O(m)
class Solution {
public:

    //word1 = abcde
    //word2 = abcdf
    //state: dp[i][j]把word1[0...i-1] convert到word2[0...j-1]需要的min step
    //function: dp[i][j] = min(dp[i-1][j-1], dp[i][j-1]+1, dp[i-1][j]+1) if(word1[i-1] == word2[j-1])
    //                   = min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j])+1 if(word1[i-1] != word2[j-1])
    //initialization: dp[0][i] = i(add word2 letter), dp[i][0] = i(remove word1 letter)
    int minDistance(string word1, string word2) {
        if(word1.empty()) return word2.length();
        if(word2.empty()) return word1.length();
        
        int n = word1.length();
        int m = word2.length();
        
        vector<vector<int>> dp(2, vector<int>(m+1, INT_MAX));
        
        dp[0][0] = 0;
        
        for(int j = 1; j <= m; j++)
        {
            dp[0][j] = j;
        }
        
        for(int i = 1; i <=n; i++)
        {
            dp[i%2][0] = i;
            for(int j = 1; j <=m; j++)
            {
                if(word1[i-1] == word2[j-1])
                {
                    dp[i%2][j] = min(dp[(i-1)%2][j-1], min(dp[i%2][j-1]+1, dp[(i-1)%2][j]+1));
                }
                else
                {
                    dp[i%2][j] = min(dp[(i-1)%2][j-1], min(dp[i%2][j-1], dp[(i-1)%2][j])) + 1;
                }
            }
        }
        
        return dp[n%2][m];
    }
};
