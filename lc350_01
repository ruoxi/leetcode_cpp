350. Intersection of Two Arrays II   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 47221
Total Submissions: 108346
Difficulty: Easy
Contributors: Admin
Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
1.What if the given array is already sorted? How would you optimize your algorithm?
=> should use two pointers method
2.What if nums1's size is small compared to nums2's size? Which algorithm is better?
=> put nums1 into map, and check if it exists in nums2 ?
3. What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
=>If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.
=>If both nums1 and nums2 are so huge that neither fit into the memory, read (let's say) 2G of each into memory and then using the 2 pointer technique, then read 2G more from the array that has been exhausted. Repeat this until no more data to read from disk.
But I am not sure this solution is good enough for an interview setting. Maybe the interviewer is expecting some solution using Map-Reduce paradigm.

Show Tags
Show Similar Problems
Have you met this question in a real interview? Yes  No
DiscussTop Solutions Pick One


//Runtime: O(n+m) //因为把nums1, nums2array都全走了一遍
//Space: O(n)


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.empty() || nums2.empty()) return vector<int>();
        
        int n = nums1.size();
        int m = nums2.size();
        
        unordered_map<int, int> dict;
        for(int i = 0; i < n; i++)
        {
            dict[nums1[i]]++;
        }
        
        vector<int> res;
        
        for(int j = 0; j < m; j++)
        {
            if(dict.find(nums2[j]) != dict.end() && dict[nums2[j]] > 0)
            {
                res.push_back(nums2[j]);
                dict[nums2[j]]--;
            }
        }
        
        return res;
    }
};
