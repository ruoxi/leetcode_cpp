/*324. Wiggle Sort II   QuestionEditorial Solution  My Submissions
Total Accepted: 18849
Total Submissions: 76870
Difficulty: Medium
Contributors: Admin
Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example:
(1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?
*/

//思路：先把数组排序，even 从mid开始向前取，odd从n-1开始取，
//这样的话可以保证第一个数小于第二个数，第二个数大于第三个数。
//Runtime: O(nlogn)
//Extra space: O(n)

class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        
        if(nums.empty() || nums.size() <= 1) return;
        
        int n = nums.size();
        
        //排序
        sort(nums.begin(), nums.end());
        
        vector<int> tmp(n, 0);
        
        int odd = n-1; int even = (n-1)/2;

        for(int i = 0; i < n; i++)
        {
            //even

            if((i&1) == 0)
            {

                tmp[i] = nums[even];
                even--;
            }
            else
            {
                tmp[i] = nums[odd];
                odd--;
            }
        }
        
        for(int i = 0; i < n; i ++)
        {
            nums[i] = tmp[i];
        }
    }
};
