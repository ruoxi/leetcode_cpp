//79. Word Search  QuestionEditorial Solution  My Submissions
//Total Accepted: 93436
//Total Submissions: 380331
//Difficulty: Medium
//Given a 2D board and a word, find if the word exists in the grid.

//The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

//For example,
//Given board =

//[
//  ['A','B','C','E'],
//  ['S','F','C','S'],
//  ['A','D','E','E']
//]
//word = "ABCCED", -> returns true,
//word = "SEE", -> returns true,
//word = "ABCB", -> returns false.
//Show Company Tags
//Show Tags
//Show Similar Problems


class Solution {
public:
    bool dfs(vector<vector<char>>& board, int i, int j, string& word, int start, vector<vector<int>>& visited)
    {
        if(start == word.length()) return true;
        if(i <0 || i >=board.size() || j < 0 || j >=board.at(0).size()) return false;
        if(visited[i][j] == 1) return false;
        if(board[i][j] != word[start]) return false;
        
        
        visited[i][j] = 1;
        
        //check neighbors
        if(dfs(board, i+1, j, word, start+1, visited)) return true;
        if(dfs(board, i-1, j, word, start+1, visited)) return true;
        if(dfs(board, i, j+1, word, start+1, visited)) return true;
        if(dfs(board, i, j-1, word, start+1, visited)) return true;
        
        visited[i][j] = 0;
        
        return false;
        
    }

    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty() || board.at(0).empty()) return false;
        
        if(word.empty()) return true;
        int n = board.size();
        int m = board.at(0).size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j<m; j++)
            {
                if(dfs(board, i, j, word, 0, visited))
                    return true;
            }
        }
        
        return false;
    }
};
