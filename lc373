373. Find K Pairs with Smallest Sums   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 18596
Total Submissions: 62802
Difficulty: Medium
Contributors: Admin
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:
Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3

Return: [1,2],[1,4],[1,6]

The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:
Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2

Return: [1,1],[1,1]

The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:
Given nums1 = [1,2], nums2 = [3],  k = 3 

Return: [1,3],[2,3]

All possible pairs are returned from the sequence:
[1,3],[2,3]


class Solution {
public:

    class Node
    {
    public:
        int row;
        int col;
        int sum;
        Node(int r, int c, int s)
        :row(r), col(c), sum(s) {}
    };
    
    class Comparator
    {
    public:
        bool operator()(const Node& a, const Node& b)
        {
            return a.sum > b.sum;
        }
    };
    
    
    //eg nums1 = {1, 1, 2}
    //eg nums2 = {1, 2, 3}
    //2d sum array
    //    1, 1, 2
    // 1, 2, 2, 3
    // 2, 3, 3, 4
    // 3, 4, 4, 5
    //then use the method of get first k smallest nums from 2d sorted array
    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        //put nums1 and nums2 to 2D array
        //then the matrix is sorted for each row and each col
        if(nums1.empty() || nums2.empty()) return vector<pair<int, int>>();
        

        int n = nums1.size();
        int m = nums2.size();
        
        //minheap
        priority_queue<Node, vector<Node>, Comparator> pq;
        
        for(int i = 0; i < n; i++)
        {
            pq.push(Node(0, i, nums1[i] + nums2[0]));
        }
        
        vector<pair<int, int>> res; 
        for(int i = 0; i < k && i < m*n; i++)
        {
            Node cur = pq.top();
            pq.pop();
            
            res.push_back(make_pair(nums1[cur.col], nums2[cur.row]));
            
            if(cur.row == m-1) continue;
            pq.push(Node(cur.row+1, cur.col, nums2[cur.row+1]+nums1[cur.col]));
        }
        
        return res;
    }
};
