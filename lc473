473. Matchsticks to Square   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 2815
Total Submissions: 8628
Difficulty: Medium
Contributors: weezer
Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.

Example 1:
Input: [1,1,2,2,2]
Output: true

Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.
Example 2:
Input: [3,3,3,3,4]
Output: false

Explanation: You cannot find a way to form a square with all the matchsticks.
Note:
The length sum of the given matchsticks is in the range of 0 to 10^9.
The length of the given matchstick array will not exceed 15.

//Note here sort the input in descending order because we always try to put nums[i] into first array, if the larger one does not work, it will take quite
//a long time to figure this out,
//if we start from larger num, then it can return earlier.

class Solution {
public:
    bool makesquare(vector<int>& nums) {
        if(nums.size() < 4) return false;
        
        sort(nums.begin(), nums.end());  
        reverse(nums.begin(), nums.end());
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
        }
        
        if(sum%4 != 0) return false;
        int target = sum/4;
        
        vector<int> sums(4, 0);
        
        return dfs(nums, 0 , target, sums);
        
        return false;
    }
    
    
    bool dfs(vector<int>& nums, int idx, int target, vector<int>& sums)
    {
        if(idx == nums.size())
        {
            if(sums[0] == target && sums[1] == target && sums[2] == target)
            {
                return true;
            }
            
            return false;
        }
        
        
        //try to put nums into sums[i]
        for(int i = 0; i < 4; i++)
        {
            if(sums[i]+nums[idx] > target) continue;
            sums[i] += nums[idx];
            if(dfs(nums, idx+1, target, sums))
            {
                return true;
            }
            sums[i] -= nums[idx];
        }
        
        return false;
    }
};
