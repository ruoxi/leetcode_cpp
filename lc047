//47. Permutations II  QuestionEditorial Solution  My Submissions
//Total Accepted: 89539
//Total Submissions: 298840
//Difficulty: Medium
//Given a collection of numbers that might contain duplicates, return all possible unique permutations.

//For example,
//[1,1,2] have the following unique permutations:
//[
//  [1,1,2],
//  [1,2,1],
//  [2,1,1]
//]


class Solution {
public:
    void dfs(vector<int>& nums, vector<bool>& visited, vector<vector<int>>& res, vector<int>& sol)
    {
        if(nums.size() == sol.size())
        {
            res.push_back(sol);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(i > 0 && nums[i] == nums[i-1] && !visited[i-1]) continue;
            if(visited[i]) continue;
            
            visited[i] = true;
            sol.push_back(nums[i]);
            dfs(nums, visited,res,sol);
            sol.pop_back();
            visited[i] = false;
        }
        
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        if(nums.empty()) return vector<vector<int>>();
        sort(nums.begin(), nums.end());
        vector<int> sol;
        vector<vector<int>> res;
        vector<bool> visited(nums.size(), false);
        
        dfs(nums, visited, res, sol);
        return res;
    }
};
