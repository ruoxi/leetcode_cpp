10. Regular Expression Matching   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 111011
Total Submissions: 474722
Difficulty: Hard
Contributors: Admin
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

//Runtime: O(nm)
//Space: O(nm)

class Solution {
public:
    //state: dp[i][j]表示p[0...j-1]是否match s[0...i-1]
    //function: dp[i][j] = dp[i-1][j-1]  if s[i-1] == p[j-1]
    //                   = dp[i-1][j-1]  if p[j-1] == '.'
    //                   = dp[i][j-2] || (dp[i-1][j] && (s[i-1] == p[j-2] || p[j-2] == '.')) if p[j-1] == '*'
    //initialization: dp[0][0] = true, dp[0][j]
    bool isMatch(string s, string p) {
        
        if(s.empty() && p.empty()) return true;

        
        int n = s.length(); int m = p.length();
        
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        dp[0][0] = true;
        for(int i = 1; i <=m; i++)
        {
            if(p[i-1] == '*')
            {
                dp[0][i] = dp[0][i-2];
            }
        }
        
        for(int i = 1; i <=n; i++)
        {
            for(int j = 1; j <=m; j++)
            {
                if(s[i-1] == p[j-1])
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1] == '.')
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1] == '*')
                {
                    if(j >=2)
                    {
                        dp[i][j] = dp[i][j-2] || (dp[i-1][j] && (s[i-1] == p[j-2] || p[j-2] == '.'));
                    }
                }
            }
        }
        
        return dp[n][m]
;        
    }
};
