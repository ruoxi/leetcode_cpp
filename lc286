286. Walls and Gates   Add to List QuestionEditorial Solution  My Submissions
Total Accepted: 23449
Total Submissions: 55339
Difficulty: Medium
Contributors: Admin
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
Show Company Tags
Show Tags
Show Similar Problems

//BFS 
//Runtime: O(nm)
//Space: O(mn)

class Solution {
public:

    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    //BFS, start from each gate do bfs and mark the rooms
    void wallsAndGates(vector<vector<int>>& rooms) {
        if(rooms.empty() || rooms.at(0).empty()) return;
        
        int n = rooms.size();
        int m = rooms.at(0).size();
        
        queue<pair<int, int>> q;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(rooms[i][j] == 0)
                {
                    //cout << "gate=" << i  << " j=" << j << endl;
                    q.push(make_pair(i, j));
                }
            }
        }
        
        int level = 0;
        while(!q.empty())
        {
            level++;
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int cx = q.front().first;
                int cy = q.front().second;
                q.pop();
                
                for(int j = 0; j < 4; j++)
                {
                    int nx = cx + dx[j];
                    int ny = cy + dy[j];
                
                    if(nx < 0 || nx >=n || ny <0 || ny >=m || rooms[nx][ny] != INT_MAX) continue;
                    //cout << "rooms["<<nx << "]["<<ny<<"]=" << rooms[nx][ny] << endl;
                    rooms[nx][ny] = level;
                    q.push(make_pair(nx, ny));
                }
            }
        }
    }
};
