366. Find Leaves of Binary Tree   QuestionEditorial Solution  My Submissions
Total Accepted: 8470
Total Submissions: 15018
Difficulty: Medium
Contributors: Admin
Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:
Given binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Returns [4, 5, 3], [2], [1].

Explanation:
1. Removing the leaves [4, 5, 3] would result in this tree:

          1
         / 
        2          
2. Now removing the leaf [2] would result in this tree:

          1          
3. Now removing the leaf [1] would result in the empty tree:

          []         
Returns [4, 5, 3], [2], [1].



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//思路：这里运用的是recursively level order traversal 
//注意这里用height来表示node的高度， leaf 高度为0， parent depth = max(left, right)+1
//这样保证每次可以把从下往上数在同一层的node加到一个vector里

//Runtime: O(N)
//Space: O(logN) ?????
class Solution {
public:

    vector<vector<int>> findLeaves(TreeNode* root) {
        
        if(root == NULL) return vector<vector<int>>();
        
        vector<vector<int>> res;
        helper(root, res);
        return res;
        
    }
    
    int helper(TreeNode* root, vector<vector<int>>& res)
    {
        if(root == NULL) return -1;
        int depth = max(helper(root->left, res),helper(root->right, res) )+1;
        
        if(res.size() == depth)
        {
            res.push_back(vector<int>());
        }
       
        res.at(depth).push_back(root->val);

        
        return depth;
    }
};
