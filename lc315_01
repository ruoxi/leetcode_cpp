/*315. Count of Smaller Numbers After Self   QuestionEditorial Solution  My Submissions
Total Accepted: 20301
Total Submissions: 61889
Difficulty: Hard
Contributors: Admin
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].*/

//思路：这里用merge sort的方法，先sort得出first = {a1, a2,a3} 和second = {b1, b2, b3}
//然后看如果first[i] > second[j]，那么这个时候first[i]就count++,因为在后半部分有比它小的数字
//这里需要注意的是在merge 之后，数字index已经变了，所以需要自己定义一个class来存储原本的index和num
//runtime: O(nlogn)
//space: O(n)?
class Solution {
public:
    
    class Node
    {
    public:
        int num;
        int idx;
        Node(int n, int i): num(n), idx(i) {}
    };
    //merge sort
    vector<int> countSmaller(vector<int>& nums) {
        if(nums.empty()) return vector<int>();
        
        int n = nums.size();
        vector<Node*> nodes(n, 0);
        
        for(int i = 0; i < n; i++)
        {
            Node* node = new Node(nums[i], i);
            nodes[i] = node;
        }
        vector<int> res(n, 0);
        mergesortCount(nodes,0, n-1, res);
        
        return res;
    }
    
    void mergesortCount(vector<Node*>& nums, int start, int end, vector<int>& res)
    {
        if(start >= end) return;
        
        int mid = start + (end - start)/2;
        //cout << " mid=" << mid << endl;
        mergesortCount(nums, start, mid, res);
        mergesortCount(nums, mid+1, end, res);
        
        //cout << "start=" <<start << " end=" << end << endl;
        int count = 0;
        int l = mid+1, k = 0, t = mid+1;
        vector<Node*> cache(end-start+1, 0);
        
        for(int i = start; i <= mid; i++, k++)
        {
            while(l<=end && nums[l]->num < nums[i]->num) l++;
            
            int count = l-mid-1;
            res[nums[i]->idx] += count;
            
            while(t < l)
            {
                cache[k++] = nums[t++];
            }
            cache[k] = nums[i];
        }
        
        //assign cache back to nums
        for(int i = 0; i < k; i++)
        {
            nums[start+i] = cache[i];
        }
        
    }
    
    
};
