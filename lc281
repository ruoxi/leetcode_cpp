281. Zigzag Iterator   QuestionEditorial Solution  My Submissions
Total Accepted: 16478
Total Submissions: 35293
Difficulty: Medium
Contributors: Admin
Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question - Update (2015-09-18):
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example, given the following input:

[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].
Hide Company Tags Google
Show Tags
Show Similar Problems



class ZigzagIterator {
public:
    ZigzagIterator(vector<int>& v1, vector<int>& v2) {
        if(!v1.empty())
        {
            q.push(make_pair(v1.begin(), v1.end()));
        }
        
        if(!v2.empty())
        {
            q.push(make_pair(v2.begin(), v2.end()));
        }
    }

    int next() {
        vector<int>::iterator cur = q.front().first;
        vector<int>::iterator end = q.front().second;
        
        q.pop();
        if(cur+1 != end)
        {
            q.push(make_pair(cur+1, end));
        }
        
        return *cur;
    }

    bool hasNext() {
      return !q.empty();
        
    }
    
    queue<pair<vector<int>::iterator, vector<int>::iterator>> q;
};

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i(v1, v2);
 * while (i.hasNext()) cout << i.next();
 */
